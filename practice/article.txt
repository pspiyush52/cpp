When the first CSS specification was published, all of CSS was contained in one document that defined CSS Level 1. CSS Level 2 was defined also by a single, multi-chapter document. However for CSS beyond Level 2, the CSS Working Group chose to adopt a modular approach, where each module defines a part of CSS, rather than to define a single monolithic specification. This breaks the specification into more manageable chunks and allows more immediate, incremental improvement to CSS.

Since different CSS modules are at different levels of stability, the CSS Working Group has chosen to publish this profile to define the current scope and state of Cascading Style Sheets as of 2023.

1.1. What is CSS?
Cascading Style Sheets (CSS)
CSS is a language for writing style sheets, and is designed to describe the rendering of structured documents (such as HTML and XML) on a variety of media. CSS is used to describe the presentation of a source document, and usually does not change the underlying semantics expressed by its document language.
Style sheet
A set of rules that specify the presentation of a document. Style sheets are written by an Author, and interpreted by a User Agent, to present the document to the User.
Source document
The document to which one or more style sheets apply. A source document’s structure and semantics are encoded using a document language (e.g., HTML, XHTML, or SVG).
Author
An author is a person who writes documents and associated style sheets. An authoring tool is a User Agent that generates style sheets.
User
A user is a person who interacts with a user agent to view, hear, or otherwise use the document.
User Agent (UA)
A user agent is any program that interprets a document and its associated style sheets on behalf of a user. A user agent may display a document, read it aloud, cause it to be printed, convert it to another format, etc. For the purposes of the CSS specifications, a User Agent is one that supports and interprets Cascading Style Sheets as defined in these specifications.
1.2. Background: The W3C Process and CSS
This section is non-normative.

In the W3C Process, a Recommendation-track document passes through three levels of stability, summarized below:

Working Draft (WD)
This is the design phase of a W3C spec. The WG iterates the spec in response to internal and external feedback.

The first official Working Draft is designated the “First Public Working Draft” (FPWD). In the CSSWG, publishing FPWD indicates that the Working Group as a whole has agreed to work on the module, roughly as scoped out and proposed in the editor’s draft.

The transition to the next stage is sometimes called “Last Call Working Draft” (LCWD) phase. The CSSWG transitions Working Drafts once we have resolved all known issues, and can make no further progress without feedback from building tests and implementations.

This “Last Call for Comments” sets a deadline for reporting any outstanding issues, and requires the WG to specially track and address incoming feedback. The comment-tracking document is the Disposition of Comments (DoC). It is submitted along with an updated draft for the Director’s approval, to demonstrate wide review and acceptance.

Candidate Recommendation (CR)
This is the testing phase of a W3C spec. Notably, this phase is about using tests and implementations to test the specification: it is not about testing the implementations. This process often reveals more problems with the spec, and so a Candidate Recommendation will morph over time in response to implementation and testing feedback, though usually less so than during the design phase (WD).
Demonstration of two correct, independent implementations of each feature is required to exit CR, so in this phase the WG builds a test suite and generates implementation reports.

The transition to the next stage is “Proposed Recommendation” (PR). During this phase the W3C Advisory Committee must approve the transition to REC.

Recommendation (REC)
This is the completed state of a W3C spec and represents a maintenance phase. At this point the WG only maintains an errata document and occasionally publishes an updated edition that incorporates the errata back into the spec.
An Editor’s Draft is effectively a live copy of the editors’ own working copy. It may or may not reflect Working Group consensus, and can at times be in a self-inconsistent state. (Because the publishing process at W3C is time-consuming and onerous, the Editor’s Draft is usually the best (most up-to-date) reference for a spec. Efforts are currently underway to reduce the friction of publishing, so that official drafts will be regularly up-to-date and Editor’s Drafts can return to their original function as scratch space.)

2. Classification of CSS Specifications
A list of all CSS modules, stable and in-progress, and their statuses can be found at the CSS Current Work page.

2.1. Cascading Style Sheets (CSS) — The Official Definition
This profile includes only specifications that we consider stable and for which we have enough implementation experience that we are sure of that stability.

NOTE: This is not intended to be a CSS Desktop Browser Profile: inclusion in this profile is based on feature stability only and not on expected use or Web browser adoption. This profile defines CSS in its most complete form.

As of 2023, Cascading Style Sheets (CSS) is defined by the following specifications.

CSS Level 2, latest revision (including errata) [CSS2]
This defines the core of CSS, parts of which are overridden by later specifications. We recommend in particular reading Chapter 2, which introduces some of the basic concepts of CSS and its design principles.
CSS Syntax Level 3 [CSS-SYNTAX-3]
Replaces CSS2§4.1, CSS2§4.2, CSS2§4.4, and CSS2§G, redefining how CSS is parsed.
CSS Style Attributes [CSS-STYLE-ATTR]
Defines how CSS declarations can be embedded in markup attributes.
Media Queries Level 3 [CSS3-MEDIAQUERIES]
Replaces CSS2§7.3 and expands on the syntax for media-specific styles.
CSS Conditional Rules Level 3 [CSS-CONDITIONAL-3]
Extends and supersedes CSS2§7.2, updating the definition of @media rules to allow nesting and introducing the @supports rule for feature-support queries.
Selectors Level 3 [SELECTORS-3]
Replaces CSS2§5 and CSS2§6.4.3, defining an extended range of selectors.
CSS Namespaces [CSS3-NAMESPACE]
Introduces an @namespace rule to allow namespace-prefixed selectors.
CSS Cascading and Inheritance Level 4 [CSS-CASCADE-4]
Extends and supersedes CSS2§1.4.3 and CSS2§6, as well as [CSS-CASCADE-3]. Describes how to collate style rules and assign values to all properties on all elements. By way of cascading and inheritance, values are propagated for all properties on all elements.
CSS Values and Units Level 3 [CSS-VALUES-3]
Extends and supersedes CSS2§1.4.2.1, CSS2§4.3, and CSS2§A.2.1–3, defining CSS’s property definition syntax and expanding its set of units.
CSS Custom Properties for Cascading Variables Module Level 1 [CSS-VARIABLES-1]
Introduces cascading variables as a new primitive value type that is accepted by all CSS properties, and custom properties for defining them.
CSS Box Model Level 3 [CSS-BOX-3]
Replaces CSS2§8.1, §8.2, §8.3 (but not §8.3.1), and §8.4.
CSS Color Level 4 [CSS-COLOR-4]
Extends and supersedes CSS2§4.3.6, CSS2§14.1, and CSS2§18.2, also extends and supersedes [CSS-COLOR-3], introducing an extended range of color spaces beyond sRGB, extended color values, and CSS Object Model extensions for color. Also defines the opacity property.
CSS Backgrounds and Borders Level 3 [CSS-BACKGROUNDS-3]
Extends and supersedes CSS2§8.5 and CSS2§14.2, providing more control of backgrounds and borders, including layered background images, image borders, and drop shadows.
CSS Images Level 3 [CSS-IMAGES-3]
Redefines and incorporates the external 2D image value type, introduces native 2D gradients, and adds additional controls for replaced element sizing and rendering.
CSS Fonts Level 3 [CSS-FONTS-3]
Extends and supersedes CSS2§15 and provides more control over font choice and feature selection.
CSS Writing Modes Level 3 [CSS-WRITING-MODES-3]
Defines CSS support for various international writing modes, such as left-to-right (e.g. Latin or Indic), right-to-left (e.g. Hebrew or Arabic), bidirectional (e.g. mixed Latin and Arabic) and vertical (e.g. Asian scripts). Replaces and extends CSS2§8.6 and §9.10.
CSS Multi-column Layout Level 1 [CSS-MULTICOL-1]
Introduces multi-column flows to CSS layout.
CSS Flexible Box Module Level 1 [CSS-FLEXBOX-1]
Introduces a flexible linear layout model for CSS.
CSS User Interface Module Level 3 [CSS-UI-3]
Extends and supersedes CSS2§18.1 and CSS2§18.4, defining cursor, outline, and several new CSS features that also enhance the user interface.
CSS Containment Module Level 1 [CSS-CONTAIN-1]
Introduces the contain property, which enforces the independent CSS processing of an element’s subtree in order to enable heavy optimizations by user agents when used well.
CSS Transforms Level 1 [CSS-TRANSFORMS-1]
Introduces coordinate-based graphical transformations to CSS.
CSS Compositing and Blending Level 1 [COMPOSITING]
Defines the compositing and blending of overlaid content and introduces features to control their modes.
CSS Easing Functions Level 1 [CSS-EASING-1].
Describes a way for authors to define a transformation that controls the rate of change of some value. Applied to animations, such transformations can be used to produce animations that mimic physical phenomena such as momentum or to cause the animation to move in discrete steps producing robot-like movement.
CSS Counter Styles Level 3 [CSS-COUNTER-STYLES-3]
Introduces the @counter-style rule, which allows authors to define their own custom counter styles for use with CSS list-marker and generated-content counters [CSS-LISTS-3]. It also predefines a set of common counter styles, including the ones present in CSS2 and CSS2.1.
NOTE: Although we don’t anticipate significant changes to the specifications that form this snapshot, their inclusion does not mean they are frozen. The Working Group will continue to address problems as they are found in these specs. Implementers should monitor www-style and/or the CSS Working Group Blog for any resulting changes, corrections, or clarifications.

2.2. Fairly Stable Modules with limited implementation experience
The following modules have completed design work, and are fairly stable, but have not received much testing and implementation experience yet. We hope to incorporate them into the official definition of CSS in a future snapshot.

Media Queries Level 4 [MEDIAQUERIES-4]
Extends and supersedes [CSS3-MEDIAQUERIES], expanding the syntax, deprecating most media types, and introducing new media features.
CSS Display Module Level 3 [CSS-DISPLAY-3]
Replaces CSS2§9.1.2, §9.2.1 (but not §9.2.1.1), §9.2.2 (but not §9.2.2.1), §9.2.3, and §9.2.4 (and lays the foundations for replacing §9.7), defining how the CSS formatting box tree is generated from the document element tree and defining the display property that controls it.
CSS Writing Modes Level 4 [CSS-WRITING-MODES-4]
Extends and supersedes [CSS-WRITING-MODES-3], adding more options for vertical writing.
CSS Fragmentation Module Level 3 [CSS-BREAK-3]
Describes the fragmentation model that partitions a flow into pages, columns, or regions and defines properties that control it. Extends and supersedes CSS2§13.3.
CSS Box Alignment Module Level 3 [CSS-ALIGN-3]
Introduces properties to control the alignment of boxes within their containers in the various CSS box layout models: block layout, table layout, flex layout, and grid layout.
CSS Shapes Module Level 1 [CSS-SHAPES-1]
Extends floats (CSS2§9.5) to effect non-rectangular wrapping shapes.
CSS Text Module Level 3 [CSS-TEXT-3]
Extends and supersedes CSS2§16 excepting §16.2, defining properties for text manipulation and specifying their processing model. It covers line breaking, justification and alignment, white space handling, and text transformation.
CSS Text Decoration Level 3 [CSS-TEXT-DECOR-3]
Extends and supersedes CSS2§16.3, providing more control over text decoration lines and adding the ability to specify text emphasis marks and text shadows.
CSS Masking Level 1 [CSS-MASKING-1]
Replaces CSS2§11.1.2 and introduces more powerful ways of clipping and masking content.
CSS Scroll Snap Module Level 1 [CSS-SCROLL-SNAP-1]
Contains features to control panning and scrolling behavior with “snap positions”.
CSS Speech Module Level 1 [CSS-SPEECH-1]
Replaces CSS2§A, overhauling the (non-normative) speech rendering chapter.
CSS Scrollbars Styling Module Level 1 [CSS-SCROLLBARS-1]
Defines properties to influence the visual styling of scrollbars, introducing controls for their color and width.
2.3. Modules with Rough Interoperability
Although the following modules have been widely deployed with rough interoperability, their details are not fully worked out or sufficiently well-specified and they need more testing and bugfixing. We hope to incorporate them into the official definition of CSS in a future snapshot.

CSS Transitions Level 1 [CSS-TRANSITIONS-1] and CSS Animations Level 1 [CSS-ANIMATIONS-1].
Introduces mechanisms for transitioning the computed values of CSS properties over time.
CSS Grid Layout Module Level 1 [CSS-GRID-1]
Introduces a two-dimensional grid-based layout system, optimized for user interface design. In the grid layout model, the children of a grid container can be positioned into arbitrary slots in a predefined flexible or fixed-size layout grid.
CSS Grid Layout Module Level 2 [CSS-GRID-2]
Extends and supersedes [CSS-GRID-1], introducing “subgrids” for managing nested markup in a shared grid framework.
CSS Will Change Level 1 [CSS-WILL-CHANGE-1]
Introduces a performance hint property called will-change.
Filter Effects Module Level 1 [FILTER-EFFECTS-1]
Introduces filter effects as a way of processing an element’s rendering before it is displayed in the document.
CSS Font Loading Module Level 3 [CSS-FONT-LOADING-3]
Introduces events and interfaces used for dynamically loading font resources.
CSS Box Sizing Level 3 [CSS-SIZING-3]
Overlays and extends CSS§10., expanding the value set of the sizing properties, introducing more precise sizing terminology, and defining with more precision and detail various automatic sizing concepts only vaguely defined in CSS2.
CSS Transforms Level 2 [CSS-TRANSFORMS-2]
Builds upon [CSS-TRANSFORMS-1] to add new transform functions and properties for three-dimensional transforms, and convenience functions for simple transforms.
CSS Lists and Counters Module Level 3 [CSS-LISTS-3]
Contains CSS features related to list counters: styling them, positioning them, and manipulating their value.
CSS Logical Properties and Values Level 1 [CSS-LOGICAL-1]
Introduces logical properties and values that provide the author with the ability to control layout through logical, rather than physical, direction and dimension mappings. Also defines logical properties and values for the features defined in [CSS2]. These properties are writing-mode relative equivalents of their corresponding physical properties.
CSS Positioned Layout Module Level 3 [CSS-POSITION-3]
Contains defines coordinate-based positioning and offsetting schemes of CSS: relative positioning, sticky positioning, absolute positioning, and fixed positioning.
Resize Observer [RESIZE-OBSERVER-1]
This specification describes an API for observing changes to element’s principal box’s size.
Web Animations [WEB-ANIMATIONS-1]
Defines a model for synchronization and timing of changes to the presentation of a Web page. Also defines an application programming interface for interacting with this model.
CSS Fonts Module Level 4 [CSS-FONTS-4]
Extends and supersedes CSS Fonts 3 and provides more control over font choice and feature selection, including support for OpenType variations.
CSS Color Adjustment Module Level 1 [CSS-COLOR-ADJUST-1]
This module introduces a model and controls over automatic color adjustment by the user agent to handle user preferences and device output optimizations.
CSS Conditional Rules Module Level 4 [CSS-CONDITIONAL-4]
Extends CSS Conditional 3 to allow testing for supported selectors.
CSS Cascading and Inheritance Level 5 [CSS-CASCADE-5]
Extends CSS Cascade 4 to add cascade layers.
CSS Scroll Snap Module Level 1 [CSS-SCROLL-SNAP-1]
Adds features to control panning and scrolling behavior with “snap positions”.
2.4. CSS Levels
Cascading Style Sheets does not have versions in the traditional sense; instead it has levels. Each level of CSS builds on the previous, refining definitions and adding features. The feature set of each higher level is a superset of any lower level, and the behavior allowed for a given feature in a higher level is a subset of that allowed in the lower levels. A user agent conforming to a higher level of CSS is thus also conformant to all lower levels.

CSS Level 1
The CSS Working Group considers the CSS1 specification to be obsolete. CSS Level 1 is defined as all the features defined in the CSS1 specification (properties, values, at-rules, etc), but using the syntax and definitions in the CSS2.1 specification. CSS Style Attributes defines its inclusion in element-specific style attributes.
CSS Level 2
Although the CSS2 specification is technically a W3C Recommendation, it passed into the Recommendation stage before the W3C had defined the Candidate Recommendation stage. Over time implementation experience and further review has brought to light many problems in the CSS2 specification, so instead of expanding an already unwieldy errata list, the CSS Working Group chose to define CSS Level 2 Revision 1 (CSS2.1). In case of any conflict between the two specs CSS2.1 contains the definitive definition.
Once CSS2.1 became Candidate Recommendation—effectively though not officially the same level of stability as CSS2—obsoleted the CSS2 Recommendation. Features in CSS2 that were dropped from CSS2.1 should be considered to be at the Candidate Recommendation stage, but note that many of these have been or will be pulled into a CSS Level 3 working draft, in which case that specification will, once it reaches CR, obsolete the definitions in CSS2.

The CSS2.1 specification defines CSS Level 2 and the CSS Style Attributes specification defines its inclusion in element-specific style attributes.

CSS Level 3
CSS Level 3 builds on CSS Level 2 module by module, using the CSS2.1 specification as its core. Each module adds functionality and/or replaces part of the CSS2.1 specification. The CSS Working Group intends that the new CSS modules will not contradict the CSS2.1 specification: only that they will add functionality and refine definitions. As each module is completed, it will be plugged in to the existing system of CSS2.1 plus previously-completed modules.
From this level on modules are levelled independently: for example Selectors Level 4 may well be completed before CSS Line Module Level 3. Modules with no CSS Level 2 equivalent start at Level 1; modules that update features that existed in CSS Level 2 start at Level 3.

CSS Level 4 and beyond
There is no CSS Level 4. Independent modules can reach level 4 or beyond, but CSS the language no longer has levels. ("CSS Level 3" as a term is used only to differentiate it from the previous monolithic versions.)
2.5. CSS Profiles
Not all implementations will implement all functionality defined in CSS.

In the past, the Working Group published a few Profiles, which were meant to define the minimal subset of CSS that various classes of user agents were expected to support.

This effort has been discontinued, as the Working Group was not finding it effective or useful, and the profiles previously defined are now unmaintained.

NOTE: Partial implementations of CSS, even if that subset is an official profile, must follow the forward-compatible parsing rules for partial implementations.

3. Requirements for Responsible Implementation of CSS
The following sections define several conformance requirements for implementing CSS responsibly, in a way that promotes interoperability in the present and future.

3.1. Partial Implementations
So that authors can exploit the forward-compatible parsing rules to assign fallback values, CSS renderers must treat as invalid (and ignore as appropriate) any at-rules, properties, property values, keywords, and other syntactic constructs for which they have no usable level of support. In particular, user agents must not selectively ignore unsupported property values and honor supported values in a single multi-value property declaration: if any value is considered invalid (as unsupported values must be), CSS requires that the entire declaration be ignored.

3.2. Implementations of Unstable and Proprietary Features
To avoid clashes with future stable CSS features, the CSSWG recommends the following best practices for the implementation of unstable features and proprietary extensions to CSS:

3.2.1. Experimentation and Unstable Features
Implementations of unstable features that are described in W3C specifications but are not interoperable should not be released broadly for general use; but may be released for limited, experimental use in controlled environments.

Why?
For example, a UA could release an unstable features for experimentation through beta or other testing-stage builds; behind a hidden configuration flag; behind a switch enabled only for specific testing partners; or through some other means of limiting dependent use.
A CSS feature is considered unstable until its specification has reached the Candidate Recommendation (CR) stage in the W3C process. In exceptional cases, the CSSWG may additionally, by an officially-recorded resolution, add pre-CR features to the set that are considered safe to release for broad use. See § 4 Safe to Release pre-CR Exceptions.

NOTE: Vendors should consult the WG explicitly and not make assumptions on this point, as a pre-CR spec that hasn’t changed in awhile is usually more out-of-date than stable.

3.2.2. Proprietary and Non-standardized Features
To avoid clashes with future CSS features, the CSS2.1 specification reserves a prefixed syntax [CSS2] for proprietary and experimental extensions to CSS. A CSS feature is a proprietary extension if it is meant for use in a closed environment accessible only to a single vendor’s user agent(s). A UA should support such proprietary extensions only through a vendor-prefixed syntax and not expose them to open (multi-UA) environments such as the World Wide Web.

Why?
For example, Firefox’s XUL-based UI, Apple’s iTunes UI, and Microsoft’s Universal Windows Platform app use extensions to CSS implemented by their respective UAs. So long as these UAs do not allow Web content to access these features, they do not provide an opportunity for such content to become dependent on their proprietary extensions.
Even if a feature is intended to eventually be used in the Web, if it hasn’t yet been standardized it should still not be exposed to the Web.

3.2.3. Market Pressure and De Facto Standards
If a feature is unstable (i.e. the spec has not yet stabilized), but

at least three UAs implement the feature (or a UA has broken the other rules and shipped for broad use an unstable or otherwise non-standard feature in a production release),

and the implementations have rough interoperability,

and the CSS Working Group has recorded consensus that this feature should exist and be released,

implementers may ship that feature unprefixed in broad-release builds. Rough interoperability is satisfied by a subjective judgment that even though there may be differences, the implementations are sufficiently similar to be used in production websites for a substantial number of use cases.

Note that the CSSWG must still be consulted to ensure coordination across vendors and to ensure coherency review by the CSS experts from each vendor. Note also that rough interoperability still usually means painful lack of interop in edge (or not-so-edge) cases, particularly because details have not been ironed out through the standards review process.

Why?
3.2.3.1. Vendor-prefixing Unstable Features
When exposing such a standards-track unstable feature to the Web in a production release, implementations should support both vendor-prefixed and unprefixed syntaxes for the feature. Once the feature has stabilized and the implementation is updated to match interoperable behavior, support for the vendor-prefixed syntax should be removed.

Why?
Anyone promoting unstable features to authors should document them using their standard unprefixed syntax, and avoid encouraging the use of the vendor-prefixed syntax for any purpose other than working around implementation differences.

3.2.3.2. Preserving the Openness of CSS
In order to preserve the open nature of CSS as a technology, vendors should make it possible for other implementors to freely implement any features that they do ship. To this end, they should provide spec-editing and testing resources to complete standardization of such features, and avoid other obstacles (e.g., platform dependency, licensing restrictions) to their competitors shipping the feature.

3.3. Implementations of CR-level Features
Once a specification reaches the Candidate Recommendation stage, implementers should release an unprefixed implementation of any CR-level feature they can demonstrate to be correctly implemented according to spec, and should avoid exposing a prefixed variant of that feature.

To establish and maintain the interoperability of CSS across implementations, the CSS Working Group requests that non-experimental CSS renderers submit an implementation report (and, if necessary, the testcases used for that implementation report) to the W3C before releasing an unprefixed implementation of any CSS features. Testcases submitted to W3C are subject to review and correction by the CSS Working Group.

Further information on submitting testcases and implementation reports can be found from on the CSS Working Group’s website at https://www.w3.org/Style/CSS/Test/. Questions should be directed to the public-css-testsuite@w3.org mailing list.

4. Safe to Release pre-CR Exceptions
The following features have been explicitly and proactively cleared by the CSS Working Group for broad release prior to the spec reaching Candidate Recommendation. See § 3.2.1 Experimentation and Unstable Features.

The flow-relative equivalents of the sizing properties (width, height, etc.), the border properties, the margin and padding properties. See explanation and specification.
The min-content and max-content keywords of the sizing properties. See decision and specification.
The conic-gradient() gradient notation. See decision.
The aspect-ratio property. [CSS-SIZING-4]
The translate, rotate, and scale properties. [CSS-TRANSFORMS-2]
The hyphenate-character property. [CSS-TEXT-4]
The color-mix() function. [CSS-COLOR-5]
The <color-interpolation-method>, defined in [CSS-COLOR-4] and used for interpolation of linear, radial and conic gradients. [CSS-IMAGES-4]
The relative color syntax, defined in [CSS-COLOR-5]
The following features have been explicitly and retroactively cleared by the CSS Working Group for broad release prior to the spec reaching Candidate Recommendation:

Everything in CSS Animations Level 1 and CSS Transitions Level 1.
The :dir(), :lang(), and :focus-within pseudo-classes from [SELECTORS-4].
5. Indices
These sections are non-normative.

5.1. Terms Index
1st <length>
2d matrix
2nd <length>
3rd <length [0,∞]>
4th <length>
absolute length
abstract dimensions
activeborder
activecaption
active duration
actual value
additive tuple
advance measure
after-change style
aliceblue
alignment baseline
alignment container
alignment context
alignment subject
alphabetic baseline
<alphavalue>
ambiguous image url
an+b
anchor
anchor unit
animation origin
animation-tainted
anonymous
anonymous box
antiquewhite
apply to
appworkspace
aqua
aquamarine
are a valid escape
atomic inline
atomic inline box
at-rule
augmented grid
aural "box" model
aural box model
authoring tool
author origin
author-origin
author presentational hint origin
author style sheet
automatic column position
automatic grid position
automatic placement
automatic position
automatic row position
auto-placement
auto-placement cursor
available font faces
available grid space
avoid break values
axis-lock
axis value
azure
backdrop
background
background painting area
background positioning area
baseline
baseline alignment
baseline alignment preference
baseline content-alignment
baseline self-alignment
baseline set
baseline-sharing group
baseline table
base size
bearing angle
before-change style
before flag
beige
bfc
bidi formatting characters
bidi-isolate
bidi-isolated
bidi isolation
bidi paragraph
bidirectionality
bi-orientational
bi-orientational transform
bisque
black
blanchedalmond
()-block
[]-block
block
{}-block
block at-rule
block axis
block-axis
block box
block container
block container box
block dimension
block end
block-end
block flow direction
block formatting context
block formatting context root
blockification
blockify
block layout
block-level
block-level box
block-level content
block scripts
block size
block-size
block start
block-start
blue
blueviolet
blur radius
boolean context
border image area
border radius
bottom
box
box alignment properties
box-corner
box fragment
box tree
break
brown
burlywood
buttonface
buttonhighlight
buttonshadow
buttontext
cadetblue
cancel
canonical unit
canvas background
canvas surface
captiontext
captures snap positions
cascade
cascade-dependent keyword
cascaded value
cascade origin
central baseline
character
chartreuse
check if three code points would start an ident sequence
check if three code points would start a number
check if two code points are a valid escape
child combinator
chinese
chocolate
circled-lower-latin
clamp a grid area
clipping path
clipping region
closest-side
clustered scripts
collapsed
collapsed flex item
collapsed grid track
collapsed gutter
collapsed track
collapsible white space
<color>
color
color stop
color stop list
color transition hint
column box
column break
column gap
column height
column rule
column width
combinators
combined duration
compatible baseline alignment preferences
compatible units
complete
completed transition
component value
computed <image>
computed track list
computed value
concrete object size
conditional group rule
conditionally hang
constraint rectangle
consume a component value
consume a declaration
consume a function
consume a list of declarations
consume a list of rules
consume an at-rule
consume an escaped code point
consume an ident-like token
consume an ident sequence
consume a number
consume a numeric token
consume a qualified rule
consume a simple block
consume a string token
consume a style block's contents
consume a token
consume a url token
consume comments
consume the next input token
consume the remnants of a bad url
contain constraint
containing block
containing block chain
containing block for all descendants
containment
content
content-based minimum size
in css-flexbox-1
in css-grid-1
content distribution
content-distribution
content-distribution properties
content language
content size suggestion
in css-flexbox-1
in css-grid-1
content writing system
continuous media
convert a string to a number
coordinated self-alignment preference
coral
cornflowerblue
cornsilk
counter style
counter symbol
cover constraint
crimson
cross axis
cross-axis
cross-axis baseline set
cross dimension
cross-end
cross size
cross-size
cross size property
cross-start
css bracketed range notation
css-connected
css feature queries
css ident
css identifier
css ident sequence
css qualified name
css-wide keywords
cubic bézier easing function
cue
cue-after
cue-before
currentcolor
current input code point
current input token
current transformation matrix
current value
cursive script
custom property
cyan
darkblue
darkcyan
darkgoldenrod
darkgray
darkgreen
darkgrey
darkkhaki
darkmagenta
darkolivegreen
darkorange
darkorchid
darkred
darksalmon
darkseagreen
darkslateblue
darkslategray
darkslategrey
darkturquoise
darkviolet
declaration
declared
declared value
decode bytes
decorating box
deeppink
deepskyblue
default namespace
default object size
default sizing algorithm
definite
definite column position
definite column span
definite grid position
definite grid span
definite position
definite row position
definite row span
definite size
definite span
descriptor
descriptor declarations
destination
determine the fallback encoding
device pixel
dice
digit
dimension
dimgray
dimgrey
directional embedding
directional override
display type
distributed alignment
distribute extra space
document
in css-backgrounds-3
in css-speech-1
in css-style-attr
document order
document white space
document white space characters
dodgerblue
dominant baseline
easing function
element
element tree
encapsulation contexts
end
ending point
ending shape
ending token
endmost
end time
end value
environment encoding
eof code point
escaping
establish an independent formatting context
establish an orthogonal flow
established an independent formatting context
establishes an independent formatting context
establishing an independent formatting context
expanded name
explicit grid
explicit grid column
explicit grid properties
explicit grid row
explicit grid track
explicitly-assigned line name
fallback alignment
false in the negative range
farthest-side
fetch an @import
filter code points
filtered code points
filter primitive
filter primitive attributes
filter primitive subregion
filter primitive tree
filter region
find the matching font faces
fire a font load event
firebrick
first-baseline alignment
first-baseline content-alignment
first baselines
first-baseline self-alignment
first baseline set
first cross-axis baseline set
first formatted line
first main-axis baseline set
first symbol value
fixed sizing function
flex base size
flex basis
flex container
flex direction
flex factor
in css-flexbox-1
in css-grid-1, for grid-template-columns, grid-template-rows
flex factor sum
flex formatting context
flex fraction
flex grow factor
flexible
flexible length
in css-flexbox-1
in css-grid-1
flexible sizing function
flexible tracks
flex item
flex layout
flex-level
flex line
flex shrink factor
float area
floralwhite
flow layout
flow-relative
flow-relative direction
font-relative lengths
font source
footnote
forced break
forced break values
forced line break
forced paragraph break
forestgreen
formatting context
fragment
fragmentainer
fragmentation
fragmentation break
fragmentation container
fragmentation context
fragmentation direction
fragmentation root
fragmented flow
free space
fuchsia
full-size
full-size kana
full-width
fully inflexible
function
functional notation
gainsboro
generate a counter
generate a counter representation
generate baselines
ghostwhite
go
gold
goldenrod
gradient-average-color
gradient box
gradient center
gradient function
gradient line
grapheme cluster
gray
graytext
green
greenyellow
grey
grid
grid area
grid cell
grid column
grid column line
grid container
grid formatting context
grid item
grid item placement algorithm
grid layout
grid-level
grid line
grid-modified document order
grid order
grid placement
grid-placement property
grid position
grid row
grid row line
grid sizing algorithm
grid span
grid track
growth limit
guaranteed-invalid value
gutter
half-width
hang
hanging glyph
height
hex digit
highlight
highlighttext
honeydew
horizontal axis
horizontal block flow
horizontal dimension
horizontal offset
horizontal-only
horizontal script
horizontal typographic mode
horizontal writing mode
hotpink
hyphenate
hyphenation
hyphenation opportunity
hypothetical cross size
hypothetical fr size
hypothetical main size
ident
ident code point
identifier
identity transform function
ident sequence
ident-start code point
ignored
implicit grid
implicit grid column
implicit grid lines
implicit grid properties
implicit grid row
implicit grid track
implicitly-assigned line name
implicitly-named area
important
import conditions
inactiveborder
inactivecaption
inactivecaptiontext
indefinite
indefinite size
independent formatting context
indianred
indigo
infinitely growable
in flow
in-flow
infobackground
infotext
inherit
in css-cascade-4
in css-cascade-4, for CSS
inheritance
in css-cascade-4
in css-cascade-4, for CSS
inherited property
inherited value
initial containing block
initial free space
initial representation for the counter value
initial value
inline
inline axis
inline-axis
inline base direction
inline block
inline block box
inline box
inline dimension
inline end
inline-end
inline formatting context
inline-level
inline-level box
inline-level content
inline size
inline-size
inline start
inline-start
inlinification
inlinify
inner box-shadow
inner display type
input progress value
input stream
integer
intended direction
intended direction and end position
intended end position
internal ruby box
internal ruby element
internal table box
internal table element
interpreter
in css-namespaces-3
in css-style-attr
intrinsic sizing function
invalid
invalid at computed-value time
invalid image
invisible
isolated sequence
isolation
iteration order
ivory
japanese
justification opportunity
keyword
khaki
known
korean
last-baseline alignment
last-baseline content-alignment
last baselines
last-baseline self-alignment
last baseline set
last cross-axis baseline set
last main-axis baseline set
lavender
lavenderblush
lawngreen
laying out in-place
layout containment
layout containment box
layout-internal
left
leftover space
legacy name alias
legacy shorthand
legacy value alias
lemonchiffon
letter
in css-syntax-3
in css-text-3
lightblue
lightcoral
lightcyan
lightgoldenrodyellow
lightgray
lightgreen
lightgrey
lightpink
lightsalmon
lightseagreen
lightskyblue
lightslategray
lightslategrey
light source
lightsteelblue
lightyellow
lime
limegreen
limited max-content contribution
limited min-content contribution
linear easing function
linear timing function
line break
in css-break-3
in css-text-3
line breaking
line breaking process
line-left
linen
line name
line name set
line orientation
line-over
line-relative
line-relative direction
line-right
line-under
loading image
local coordinate system
local url flag
logical height
logical width
longhand
longhand property
lowercase letter
magenta
main axis
main-axis
main-axis baseline set
main dimension
main-end
main size
main-size
main size property
main-start
maroon
mask border image
mask border image area
mask image
mask layer image
mask painting area
mask-position
mask positioning area
mask-size
matching transition delay
matching transition duration
matching transition-property value
matching transition timing function
max cross size
max cross size property
maximum allowed code point
max inner height
max inner width
max main size
max main size property
max track sizing function
media condition
media feature
media query
media query list
media query modifier
media type
mediumaquamarine
mediumblue
mediumorchid
mediumpurple
mediumseagreen
mediumslateblue
mediumspringgreen
mediumturquoise
mediumvioletred
menu
menutext
midnightblue
min cross size
min cross size property
minimum contribution
min inner height
min inner width
min main size
min main size property
mintcream
min track sizing function
mistyrose
moccasin
monolithic
multicol container
multi-col line
multicol line
multi-column container
multi-column formatting context
multi-column layout
multi-column line
multi-column spanner
multi-column spanning element
multi-line flex container
multiply
named cell token
named grid area
namespace prefix
name-start code point
natural aspect ratio
natural dimension
natural end-point
natural height
natural size
natural width
navajowhite
navy
nearest neighbor
newline
next input code point
next input token
next-sibling combinator
non-ascii code point
non-ascii ident code point
non-printable code point
non-replaced
non-replaced element
no pending font loads
normal
normalize into a token stream
null cell token
number
numeric data types
objects
object size negotiation
occupied
oldlace
olive
olivedrab
opacity
operating coordinate space
optimal viewing region
orange
orangered
orchid
order-modified document order
in css-display-3
in css-flexbox-1
orthogonal
orthogonal flow
other space separators
outer box-shadow
outer display type
out of flow
out-of-flow
output of the cascade
output progress value
over
overflow alignment
overflow columns
page break
paged media
pagination
paint containment
paint containment box
palegoldenrod
palegreen
paleturquoise
palevioletred
papayawhip
parent box
parse
parse a comma-separated list according to a css grammar
parse a comma-separated list of component values
parse a component value
parse a css stylesheet
parse a declaration
parse a list
parse a list of component values
parse a list of declarations
parse a list of rules
parse a rule
parse a style block's contents
parse a stylesheet
parse error
parse something according to a css grammar
parsing a list
participates in baseline alignment
pass through filter
pause
pause-after
pause-before
peachpuff
pending on the environment
pending-substitution value
percentage
peru
physical
physical bottom
physical dimensions
physical direction
physical left
physical right
physical top
physical units
pink
pixel unit
plum
positional alignment
possibly pending font loads
post-multiplied
post-multiply
powderblue
pre-multiplied
pre-multiply
preserved tokens
preserved white space
primary filter primitive tree
principal box
principal writing mode
propagate
propagation
property
property declarations
purple
qualified rule
range context
reconsume the current input code point
reconsume the current input token
red
reference box
in css-shapes-1, for <basic-shape>
in css-transforms-1
reference pixel
region break
relative length
remaining fragmentainer extent
remaining free space
renderer
replaced
replaced element
representation
reset-only sub-property
re-snap
resolved type
rest
rest-after
rest-before
reversing-adjusted start value
reversing shortening factor
right
root element
rosybrown
royalblue
run-in
run-in box
run-in sequence
running transition
saddlebrown
salmon
sandybrown
scaled flex shrink factor
scrollbar
scroll snap
scroll snap area
scroll snap container
scroll snapport
scroll snap position
seagreen
seashell
segment break
selector
self-alignment
self-alignment properties
semitone
sequence of simple selectors
serialize an <an+b> value
set entries
shared alignment context
shorthand
shorthand property
sideways typesetting
sienna
silver
simple block
simple selector
single-line flex container
size containment
size containment box
sizing as if empty
sizing function
skyblue
slateblue
slategray
slategrey
small
small kana
snow
soft wrap break
soft wrap opportunity
source
spaces
space to fill
span count
spanner
spanning element
speak
speak-as
specified size
specified size suggestion
in css-flexbox-1
in css-grid-1
specified value
spread break
spread distance
springgreen
start
starting point
startmost
starts with an ident sequence
starts with a number
starts with a valid escape
start time
start value
start with an ident sequence
start with a number
statement at-rule
static position rectangle
static-position rectangle
in css-align-3
in css-flexbox-1
steelblue
step easing function
step position
steps
stop or comma
stretched
strictness value
stroke bounding box
structural pseudo-classes
strut size
stuck on the environment
style attribute
style change event
style rule
style sheet
in css-backgrounds-3
in css-namespaces-3
in css-speech-1
subjects of the selector
sub-property
subsequent-sibling combinator
substitute a var()
support
supports queries
switch the fontfaceset to loaded
switch the fontfaceset to loading
synthesize baseline
synthesized baseline
table caption box
tabs
tab size
tab stop
tan
target main size
teal
text node
text run
textual data types
thistle
threeddarkshadow
threedface
threedhighlight
threedlightshadow
threedshadow
timing function
tokenization
tokenize
tomato
top
tracking
track list
track section
track sizing algorithm
track sizing function
transfer function element
transfer function element attributes
transferred size suggestion
in css-flexbox-1
in css-grid-1
transformable element
transformation matrix
transformed element
transitionable
transition origin
transparent
trash token
triangle
trinary
turquoise
type selector
typeset sideways
typesetting sideways
typesetting upright
typeset upright
typographic character
typographic character unit
typographic letter unit
typographic mode
ua
in css-backgrounds-3
in css-speech-1
ua origin
ua-origin
ua style sheet
under
unforced break
universal selector
unknown
unoccupied
upper-alpha-legal
uppercase letter
upright typesetting
url
use a negative sign
used value
user agent
in css-backgrounds-3
in css-speech-1
user-agent origin
user-agent style sheet
user coordinate system
user origin
user-origin
user style sheet
uses a negative sign
valid image
value definition syntax
var() substitution
vertical axis
vertical block flow
vertical dimension
vertical offset
vertical-only
vertical script
vertical typographic mode
vertical writing mode
viewport-percentage lengths
violet
visual angle unit
voice-balance
voice-duration
voice-family
voice-pitch
voice-range
voice-rate
voice-stress
voice-volume
wheat
white
whitesmoke
white space
whitespace
white space characters
width
window
windowframe
windowtext
word separator
word-separator character
would start an ident sequence
would start a number
wrap
in css-shapes-1
in css-text-3
wrapping
in css-shapes-1
in css-text-3
writing mode
x-axis
y-axis
yellow
yellowgreen
5.2. Selector Index
*
:active
::after
::before
:checked
:disabled
:empty
:enabled
:first-child
::first-letter
::first-line
:first-of-type
:focus
:hover
:lang
:last-child
:last-of-type
:link
:not()
:nth-child()
:nth-last-child()
:nth-last-of-type()
:nth-of-type()
:only-child
:only-of-type
:root
:target
:visited
5.3. At-Rule Index
@charset
@counter-style
@import
@keyframes
@media
@supports
5.4. Property Index
--*
align-content
in css-align-3
in css-flexbox-1
align-items
in css-align-3
in css-flexbox-1
align-self
in css-align-3
in css-flexbox-1
all
animation
animation-delay
animation-direction
animation-duration
animation-fill-mode
animation-iteration-count
animation-name
animation-play-state
animation-timing-function
background
background-attachment
background-blend-mode
background-clip
background-color
background-image
background-origin
background-position
background-repeat
background-size
border
border-bottom
border-bottom-color
border-bottom-left-radius
border-bottom-right-radius
border-bottom-style
border-bottom-width
border-color
border-image
border-image-outset
border-image-repeat
border-image-slice
border-image-source
border-image-width
border-left
border-left-color
border-left-style
border-left-width
border-radius
border-right
border-right-color
border-right-style
border-right-width
border-style
border-top
border-top-color
border-top-left-radius
border-top-right-radius
border-top-style
border-top-width
border-width
box-decoration-break
box-shadow
box-sizing
break-after
break-before
break-inside
caret-color
clip
clip-path
clip-rule
color-interpolation-filters
column-count
column-fill
column-gap
column-rule
column-rule-color
column-rule-style
column-rule-width
columns
column-span
column-width
contain
cue
cue-after
cue-before
cursor
direction
display
filter
flex
flex-basis
flex-direction
flex-flow
flex-grow
flex-shrink
flex-wrap
flood-color
flood-opacity
gap
glyph-orientation-vertical
grid
grid-area
grid-auto-columns
grid-auto-flow
grid-auto-rows
grid-column
grid-column-end
grid-column-gap
grid-column-start
grid-gap
grid-row
grid-row-end
grid-row-gap
grid-row-start
grid-template
grid-template-areas
grid-template-columns
grid-template-rows
hanging-punctuation
hyphens
image-orientation
image-rendering
isolation
justify-content
in css-align-3
in css-flexbox-1
justify-items
justify-self
letter-spacing
lighting-color
line-break
mask
mask-border
mask-border-mode
mask-border-outset
mask-border-repeat
mask-border-slice
mask-border-source
mask-border-width
mask-clip
mask-composite
mask-image
mask-mode
mask-origin
mask-position
mask-repeat
mask-size
mask-type
mix-blend-mode
object-fit
object-position
order
in css-display-3
in css-flexbox-1
orphans
outline
outline-color
outline-offset
outline-style
outline-width
overflow-wrap
pause
pause-after
pause-before
place-content
place-items
place-self
resize
rest
rest-after
rest-before
row-gap
scroll-margin
scroll-margin-block
scroll-margin-block-end
scroll-margin-block-start
scroll-margin-bottom
scroll-margin-inline
scroll-margin-inline-end
scroll-margin-inline-start
scroll-margin-left
scroll-margin-right
scroll-margin-top
scroll-padding
scroll-padding-block
scroll-padding-block-end
scroll-padding-block-start
scroll-padding-bottom
scroll-padding-inline
scroll-padding-inline-end
scroll-padding-inline-start
scroll-padding-left
scroll-padding-right
scroll-padding-top
scroll-snap-align
scroll-snap-stop
scroll-snap-type
shape-image-threshold
shape-margin
shape-outside
speak
speak-as
tab-size
text-align
text-align-all
text-align-last
text-combine-upright
text-decoration
text-decoration-color
text-decoration-line
text-decoration-style
text-emphasis
text-emphasis-color
text-emphasis-position
text-emphasis-style
text-indent
text-justify
text-orientation
text-overflow
text-shadow
text-transform
text-underline-position
transform
transform-box
transform-origin
transition
transition-delay
transition-duration
transition-property
transition-timing-function
unicode-bidi
visibility
voice-balance
voice-duration
voice-family
voice-pitch
voice-range
voice-rate
voice-stress
voice-volume
white-space
widows
will-change
word-break
word-spacing
word-wrap
writing-mode
5.5. Values Index
absolute
in css-speech-1, for voice-pitch
in css-speech-1, for voice-range
add
additive
alias
all
in css-multicol-1, for column-span
in css-transitions-1, for transition-property
in css-writing-modes-4, for text-combine-upright
in mediaqueries-4, for @media
allow-end
all-scroll
alpha
in css-masking-1, for mask-border-mode
in css-masking-1, for mask-mode
in css-masking-1, for mask-type
alphabetic
alternate
alternate-reverse
always
in css-scroll-snap-1, for scroll-snap-stop
in css-speech-1, for speak
<angle>
anywhere
in css-text-3, for line-break
in css-text-3, for overflow-wrap
arabic-indic
armenian
aural
auto
in css-align-3, for align-self
in css-align-3, for justify-self
in css-backgrounds-3, for background-size
in css-backgrounds-3, for border-image-width
in css-break-3, for break-before, break-after
in css-break-3, for break-inside, page-break-inside
in css-counter-styles-3, for @counter-style/range
in css-counter-styles-3, for @counter-style/speak-as
in css-flexbox-1, for align-items, align-self
in css-flexbox-1, for flex-basis
in css-grid-1, for <grid-line>
in css-grid-1, for grid-template-columns, grid-template-rows
in css-images-3, for image-rendering
in css-multicol-1, for column-count
in css-multicol-1, for column-fill
in css-multicol-1, for column-width
in css-scroll-snap-1, for scroll-padding, scroll-padding-inline, scroll-padding-inline-start, scroll-padding-inline-end, scroll-padding-block, scroll-padding-block-start, scroll-padding-block-end
in css-speech-1, for speak
in css-speech-1, for voice-duration
in css-text-3, for hyphens
in css-text-3, for line-break
in css-text-3, for text-align-last
in css-text-3, for text-justify
in css-text-decor-3, for text-underline-position
in css-ui-3, for caret-color
in css-ui-3, for cursor
in css-will-change-1, for will-change
in filter-effects-1, for color-interpolation-filters
auto-fill
auto-fit
[ auto-flow && dense? ] <'grid-auto-rows'>? / <'grid-template-columns'>
avoid
in css-break-3, for break-before, break-after
in css-break-3, for break-inside, page-break-inside
avoid-column
in css-break-3, for break-before, break-after
in css-break-3, for break-inside, page-break-inside
avoid-page
in css-break-3, for break-before, break-after
in css-break-3, for break-inside, page-break-inside
avoid-region
in css-break-3, for break-before, break-after
in css-break-3, for break-inside, page-break-inside
backwards
balance
balance-all
baseline
in css-align-3, for justify-self, justify-items, align-content, align-self, align-items, <baseline-position>
in css-flexbox-1, for align-items, align-self
<basic-shape>
bengali
bidi-override
blink
block
in css-display-3, for display, <display-outside>
in css-scroll-snap-1, for scroll-snap-type
border-box
in css-backgrounds-3, for background-clip
in css-backgrounds-3, for background-origin
in css-masking-1, for mask-clip
in css-masking-1, for mask-origin
in css-shapes-1, for <shape-box>, shape-outside
in css-transforms-1, for transform-box
in css-ui-3, for box-sizing
both
in css-animations-1, for animation-fill-mode
in css-scroll-snap-1, for scroll-snap-type
bottom
in css-backgrounds-3, for background-position
in css-transforms-1, for transform-origin
braille
break-all
break-spaces
break-word
in css-text-3, for overflow-wrap
in css-text-3, for word-break
bullets
cambodian
capitalize
cell
center
in css-align-3, for <self-position>, <content-position>, justify-self, align-self, justify-content, align-content
in css-backgrounds-3, for background-position
in css-flexbox-1, for align-content
in css-flexbox-1, for align-items, align-self
in css-flexbox-1, for justify-content
in css-scroll-snap-1, for scroll-snap-align
in css-speech-1, for voice-balance
in css-text-3, for text-align
in css-transforms-1, for transform-origin
ch
child
circle
in css-counter-styles-3, for <counter-style-name>
in css-images-3, for <ending-shape>
in css-images-3, for <rg-ending-shape>
in css-text-decor-3, for text-emphasis-style
cjk-decimal
cjk-earthly-branch
cjk-heavenly-stem
cjk-ideographic
clip
clone
closest-corner
in css-images-3, for <rg-extent-keyword>, radial-gradient(), repeating-radial-gradient()
in css-images-3, for <size>
closest-side
in css-images-3, for <rg-extent-keyword>, radial-gradient(), repeating-radial-gradient()
in css-images-3, for <size>
cm
coarse
collapse
color
color-burn
color-dodge
col-resize
column
in css-break-3, for break-before, break-after
in css-flexbox-1, for flex-direction
in css-grid-1, for grid-auto-flow
column-reverse
contain
in css-backgrounds-3, for background-size
in css-images-3, for object-fit
content
in css-contain-1, for contain
in css-flexbox-1, for flex-basis
content-box
in css-backgrounds-3, for background-clip
in css-backgrounds-3, for background-origin
in css-masking-1, for mask-clip
in css-masking-1, for mask-origin
in css-shapes-1, for <shape-box>, shape-outside
in css-transforms-1, for transform-box
in css-ui-3, for box-sizing
contents
in css-display-3, for display, <display-box>
in css-will-change-1, for will-change
context-menu
copy
<counter-style-name>
cover
in css-backgrounds-3, for background-size
in css-images-3, for object-fit
crisp-edges
crosshair
cyclic
darken
dashed
<decibel>
decimal
decimal-leading-zero
default
deg
dense
devanagari
difference
digits
digits <integer>?
digits <integer [2,4]>?
disc
disclosure-closed
disclosure-open
distribute
dot
dotted
double
double-circle
dpcm
dpi
dppx
each-line
ease
in css-easing-1, for <cubic-bezier-easing-function>
in css-easing-1, for cubic-bezier-easing-function, <cubic-bezier-easing-function>
ease-in
in css-easing-1, for <cubic-bezier-easing-function>
in css-easing-1, for cubic-bezier-easing-function, <cubic-bezier-easing-function>
ease-in-out
in css-easing-1, for <cubic-bezier-easing-function>
in css-easing-1, for cubic-bezier-easing-function, <cubic-bezier-easing-function>
ease-out
in css-easing-1, for <cubic-bezier-easing-function>
in css-easing-1, for cubic-bezier-easing-function, <cubic-bezier-easing-function>
ellipse
in css-images-3, for <ending-shape>
in css-images-3, for <rg-ending-shape>
ellipsis
em
embed
embossed
end
in css-align-3, for <self-position>, <content-position>, justify-self, align-self, justify-content, align-content
in css-easing-1, for steps()
in css-scroll-snap-1, for scroll-snap-align
in css-text-3, for text-align
<ending-shape>
e-resize
ethiopic-numeric
evenodd
ew-resize
ex
exclude
exclusion
extends
farthest-corner
in css-images-3, for <rg-extent-keyword>, radial-gradient(), repeating-radial-gradient()
in css-images-3, for <size>
farthest-side
in css-images-3, for <rg-extent-keyword>, radial-gradient(), repeating-radial-gradient()
in css-images-3, for <size>
fast
in css-speech-1, for voice-rate
in mediaqueries-4, for @media/update
female
fill
in css-backgrounds-3, for border-image-slice
in css-images-3, for object-fit
in css-masking-1, for mask-border-slice
fill-box
in css-masking-1, for clip-path
in css-masking-1, for mask-clip
in css-masking-1, for mask-origin
in css-transforms-1, for transform-box
filled
fine
first
in css-align-3, for justify-self, justify-items, align-content, align-self, align-items, <baseline-position>
in css-text-3, for hanging-punctuation
first baseline
fit-content()
fixed
in css-backgrounds-3, for background-attachment
in css-counter-styles-3, for @counter-style/system
<flex>
flex
in css-display-3, for display, <display-inside>
in css-flexbox-1, for display
<'flex-basis'>
flex-end
in css-align-3, for <self-position>, <content-position>, justify-self, align-self, justify-content, align-content
in css-flexbox-1, for align-content
in css-flexbox-1, for align-items, align-self
in css-flexbox-1, for justify-content
<'flex-grow'>
<'flex-shrink'>
flex-start
in css-align-3, for <self-position>, <content-position>, justify-self, align-self, justify-content, align-content
in css-flexbox-1, for align-content
in css-flexbox-1, for align-items, align-self
in css-flexbox-1, for justify-content
flip
flow
flow-root
force-end
forwards
fr
from-image
fr unit
full-size-kana
full-width
georgian
grab
grabbing
grad
grid
in css-display-3, for display, <display-inside>
in css-grid-1, for display
<'grid-template-rows'> / [ auto-flow && dense? ] <'grid-auto-columns'>?
<'grid-template-rows'> / <'grid-template-columns'>
groove
gujarati
gurmukhi
handheld
hanging
hard-light
hebrew
help
hidden
in css-backgrounds-3, for <line-style>, border-style, border-top-style, border-left-style, border-bottom-style, border-right-style, border
in css-display-3, for visibility
high
in css-speech-1, for voice-pitch
in css-speech-1, for voice-range
high-quality
hiragana
hiragana-iroha
horizontal-tb
hover
hue
hz
in
infinite
in css-animations-1, for animation-iteration-count
in mediaqueries-4, for @media/resolution
inherit
initial
inline
in css-display-3, for display, <display-outside>
in css-scroll-snap-1, for scroll-snap-type
inline-block
inline-flex
in css-display-3, for display, <display-legacy>
in css-flexbox-1, for display
inline-grid
in css-display-3, for display, <display-legacy>
in css-grid-1, for display
inline-table
inset
in css-backgrounds-3, for <line-style>, border-style, border-top-style, border-left-style, border-bottom-style, border-right-style, border
in css-backgrounds-3, for box-shadow
[ <integer [-∞,-1]> | <integer [1,∞]> ] && <custom-ident>?
<integer> && <custom-ident>?
inter-character
interlace
intersect
inter-word
invert
isolate
isolate-override
japanese-formal
japanese-informal
jump-both
jump-end
jump-none
jump-start
justify
justify-all
kannada
katakana
katakana-iroha
keep-all
<keyframes-name>
khmer
khz
korean-hangul-formal
korean-hanja-formal
korean-hanja-informal
landscape
lao
last
in css-align-3, for justify-self, justify-items, align-content, align-self, align-items, <baseline-position>
in css-text-3, for hanging-punctuation
last baseline
layout
left
in css-align-3, for justify-content, justify-self, justify-items
in css-backgrounds-3, for background-position
in css-break-3, for break-before, break-after
in css-speech-1, for voice-balance
in css-text-3, for text-align
in css-text-decor-3, for text-emphasis-position
in css-text-decor-3, for text-underline-position
in css-transforms-1, for transform-origin
leftwards
legacy
<length>
in css-images-3, for <size>
in css-text-3, for letter-spacing
in css-text-3, for text-indent
in css-text-3, for word-spacing
<length [0,∞]>
<length-percentage [0,∞]>{2}
<length-percentage>{2}
lighten
linear
linearrgb
[ <line-names>? <string> <track-size>? <line-names>? ]+ [ / <explicit-track-list> ]?
line-through
list-item
literal-punctuation
local
loose
loud
low
in css-speech-1, for voice-pitch
in css-speech-1, for voice-range
lower-alpha
lower-armenian
lowercase
lower-greek
lower-latin
lower-roman
ltr
luminance
in css-masking-1, for mask-border-mode
in css-masking-1, for mask-mode
in css-masking-1, for mask-type
luminosity
malayalam
male
mandatory
manual
margin-box
match-parent
match-source
max-content
medium
in css-backgrounds-3, for <line-width>, border-width, border-top-width, border-left-width, border-bottom-width, border-right-width, border
in css-speech-1, for pause-before, pause-after
in css-speech-1, for rest-before, rest-after
in css-speech-1, for voice-pitch
in css-speech-1, for voice-range
in css-speech-1, for voice-rate
in css-speech-1, for voice-volume
min-content
minmax()
mixed
mm
moderate
mongolian
move
ms
multiply
myanmar
ne-resize
nesw-resize
neutral
never
no-clip
no-drop
none
in css-animations-1, for animation-fill-mode
in css-animations-1, for animation-name
in css-backgrounds-3, for <line-style>, border-style, border-top-style, border-left-style, border-bottom-style, border-right-style, border
in css-backgrounds-3, for background-image
in css-backgrounds-3, for box-shadow
in css-contain-1, for contain
in css-display-3, for display, <display-box>
in css-flexbox-1, for flex
in css-grid-1, for grid-template
in css-grid-1, for grid-template-areas
in css-grid-1, for grid-template-rows, grid-template-columns
in css-images-3, for image-orientation
in css-images-3, for object-fit
in css-multicol-1, for column-span
in css-scroll-snap-1, for scroll-snap-align
in css-scroll-snap-1, for scroll-snap-type
in css-shapes-1, for shape-outside
in css-speech-1, for pause-before, pause-after
in css-speech-1, for rest-before, rest-after
in css-speech-1, for voice-stress
in css-text-3, for hanging-punctuation
in css-text-3, for hyphens
in css-text-3, for text-justify
in css-text-3, for text-transform
in css-text-decor-3, for text-decoration-line
in css-text-decor-3, for text-emphasis-style
in css-transitions-1, for transition-property
in css-ui-3, for cursor
in css-writing-modes-4, for text-combine-upright
in mediaqueries-4, for @media/hover
in mediaqueries-4, for @media/overflow-block
in mediaqueries-4, for @media/overflow-inline
in mediaqueries-4, for @media/pointer
in mediaqueries-4, for @media/update
nonzero
no-punctuation
no-repeat
normal
in compositing-1, for <blend-mode>
in css-align-3, for align-self
in css-align-3, for justify-content, align-content
in css-align-3, for justify-self
in css-align-3, for row-gap, column-gap, gap
in css-animations-1, for animation-direction
in css-scroll-snap-1, for scroll-snap-stop
in css-speech-1, for speak-as
in css-speech-1, for voice-rate
in css-speech-1, for voice-stress
in css-text-3, for letter-spacing
in css-text-3, for line-break
in css-text-3, for overflow-wrap
in css-text-3, for white-space
in css-text-3, for word-break
in css-text-3, for word-spacing
in css-writing-modes-4, for unicode-bidi
not
not-allowed
nowrap
in css-flexbox-1, for flex-wrap
in css-text-3, for white-space
n-resize
ns-resize
numbers
numeric
nw-resize
nwse-resize
objectboundingbox
in css-masking-1, for clipPathUnits
in css-masking-1, for maskContentUnits
in css-masking-1, for maskUnits
old
only
open
oriya
outset
over
overlay
overline
p3
padding-box
in css-backgrounds-3, for background-clip
in css-backgrounds-3, for background-origin
in css-masking-1, for mask-clip
in css-masking-1, for mask-origin
in css-shapes-1, for <shape-box>, shape-outside
page
paged
paint
paused
pc
<percentage>
persian
pixelated
plaintext
pointer
portrait
pre
pre-line
preserve
pre-wrap
print
progress
progressive
projection
proximity
pt
px
q
rad
rec2020
recto
reduced
region
rem
repeat
in css-backgrounds-3, for background-repeat
in css-backgrounds-3, for border-image-repeat
repeat-x
repeat-y
reverse
revert
<rg-ending-shape>
<rg-size>
ridge
right
in css-align-3, for justify-content, justify-self, justify-items
in css-backgrounds-3, for background-position
in css-break-3, for break-before, break-after
in css-speech-1, for voice-balance
in css-text-3, for text-align
in css-text-decor-3, for text-emphasis-position
in css-text-decor-3, for text-underline-position
in css-transforms-1, for transform-origin
rightwards
round
in css-backgrounds-3, for background-repeat
in css-backgrounds-3, for border-image-repeat
row
in css-flexbox-1, for flex-direction
in css-grid-1, for grid-auto-flow
row-resize
row-reverse
rtl
ruby
ruby-base
ruby-base-container
ruby-text
ruby-text-container
run-in
running
s
safe
saturation
scale-down
screen
in compositing-1, for <blend-mode>
in mediaqueries-4, for @media
scroll
in css-backgrounds-3, for background-attachment
in mediaqueries-4, for @media/overflow-block
in mediaqueries-4, for @media/overflow-inline
scroll-position
self-end
self-start
<semitones>
in css-speech-1, for voice-pitch
in css-speech-1, for voice-range
se-resize
sesame
sideways
sideways-lr
sideways-right
sideways-rl
silent
simp-chinese-formal
simp-chinese-informal
<size>
size
slice
slow
in css-speech-1, for voice-rate
in mediaqueries-4, for @media/update
smooth
soft
soft-light
solid
space
in css-backgrounds-3, for background-repeat
in css-backgrounds-3, for border-image-repeat
space-around
in css-align-3, for align-content, justify-content, <content-distribution>
in css-flexbox-1, for align-content
in css-flexbox-1, for justify-content
space-between
in css-align-3, for align-content, justify-content, <content-distribution>
in css-flexbox-1, for align-content
in css-flexbox-1, for justify-content
space-evenly
span && [ <integer [1,∞]> || <custom-ident> ]
span && [ <integer> || <custom-ident> ]
speech
spell-out
in css-counter-styles-3, for @counter-style/speak-as
in css-speech-1, for speak-as
square
s-resize
srgb
in filter-effects-1, for color-interpolation-filters
in mediaqueries-4, for @media/color-gamut
start
in css-align-3, for <self-position>, <content-position>, justify-self, align-self, justify-content, align-content
in css-easing-1, for steps()
in css-scroll-snap-1, for scroll-snap-align
in css-text-3, for text-align
step-end
in css-easing-1, for <step-easing-function>
in css-easing-1, for step-easing-function, <step-easing-function>
step-start
in css-easing-1, for <step-easing-function>
in css-easing-1, for step-easing-function, <step-easing-function>
stretch
in css-align-3, for align-content, justify-content, <content-distribution>
in css-align-3, for align-self
in css-align-3, for justify-self
in css-backgrounds-3, for border-image-repeat
in css-flexbox-1, for align-content
in css-flexbox-1, for align-items, align-self
strict
in css-contain-1, for contain
in css-text-3, for line-break
<string>+
stroke-box
in css-masking-1, for clip-path
in css-masking-1, for mask-clip
in css-masking-1, for mask-origin
in css-transforms-1, for transform-box
strong
in css-speech-1, for pause-before, pause-after
in css-speech-1, for rest-before, rest-after
in css-speech-1, for voice-stress
subtract
sw-resize
symbolic
table
table-caption
table-cell
table-column
table-column-group
table-footer-group
table-header-group
table-row
table-row-group
tamil
telugu
text
thai
thick
thin
tibetan
top
in css-backgrounds-3, for background-position
in css-transforms-1, for transform-origin
<track-list> | <auto-track-list>
trad-chinese-formal
trad-chinese-informal
triangle
tty
turn
tv
under
in css-text-decor-3, for text-emphasis-position
in css-text-decor-3, for text-underline-position
underline
unsafe
unset
upper-alpha
upper-armenian
uppercase
upper-latin
upper-roman
upright
<url>
userspaceonuse
in css-masking-1, for clipPathUnits
in css-masking-1, for maskContentUnits
in css-masking-1, for maskUnits
verso
vertical-lr
vertical-rl
vertical-text
vh
view-box
in css-masking-1, for clip-path
in css-masking-1, for mask-clip
in css-masking-1, for mask-origin
in css-transforms-1, for transform-box
visible
vmax
vmin
vw
wait
weak
in css-speech-1, for pause-before, pause-after
in css-speech-1, for rest-before, rest-after
words
wrap
wrap-reverse
w-resize
x
x-fast
x-high
in css-speech-1, for voice-pitch
in css-speech-1, for voice-range
x-loud
x-low
in css-speech-1, for voice-pitch
in css-speech-1, for voice-range
x-slow
x-soft
x-strong
in css-speech-1, for pause-before, pause-after
in css-speech-1, for rest-before, rest-after
x-weak
in css-speech-1, for pause-before, pause-after
in css-speech-1, for rest-before, rest-after
y
young
zoom-in
zoom-out
6. Acknowledgements
Special thanks to Florian Rivoal for creating the initial draft of the § 3.2.1 Experimentation and Unstable Features recommendations.

Conformance
Document conventions
Conformance requirements are expressed with a combination of descriptive assertions and RFC 2119 terminology. The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in the normative parts of this document are to be interpreted as described in RFC 2119. However, for readability, these words do not appear in all uppercase letters in this specification.

All of the text of this specification is normative except sections explicitly marked as non-normative, examples, and notes. [RFC2119]

Examples in this specification are introduced with the words “for example” or are set apart from the normative text with class="example", like this:

This is an example of an informative example.

Informative notes begin with the word “Note” and are set apart from the normative text with class="note", like this:

Note, this is an informative note.

Advisements are normative sections styled to evoke special attention and are set apart from other normative text with <strong class="advisement">, like this:
UAs MUST provide an accessible alternative.

Conformance classes
Conformance to this specification is defined for three conformance classes:

style sheet
A CSS style sheet.
renderer
A UA that interprets the semantics of a style sheet and renders documents that use them.
authoring tool
A UA that writes a style sheet.
A style sheet is conformant to this specification if all of its statements that use syntax defined in this module are valid according to the generic CSS grammar and the individual grammars of each feature defined in this module.

A renderer is conformant to this specification if, in addition to interpreting the style sheet as defined by the appropriate specifications, it supports all the features defined by this specification by parsing them correctly and rendering the document accordingly. However, the inability of a UA to correctly render a document due to limitations of the device does not make the UA non-conformant. (For example, a UA is not required to render color on a monochrome monitor.)

An authoring tool is conformant to this specification if it writes style sheets that are syntactically correct according to the generic CSS grammar and the individual grammars of each feature in this module, and meet all other conformance requirements of style sheets as described in this module.

Partial implementations
So that authors can exploit the forward-compatible parsing rules to assign fallback values, CSS renderers must treat as invalid (and ignore as appropriate) any at-rules, properties, property values, keywords, and other syntactic constructs for which they have no usable level of support. In particular, user agents must not selectively ignore unsupported component values and honor supported values in a single multi-value property declaration: if any value is considered invalid (as unsupported values must be), CSS requires that the entire declaration be ignored.

Implementations of Unstable and Proprietary Features
To avoid clashes with future stable CSS features, the CSSWG recommends following best practices for the implementation of unstable features and proprietary extensions to CSS.

Non-experimental implementations
Once a specification reaches the Candidate Recommendation stage, non-experimental implementations are possible, and implementors should release an unprefixed implementation of any CR-level feature they can demonstrate to be correctly implemented according to spec.

To establish and maintain the interoperability of CSS across implementations, the CSS Working Group requests that non-experimental CSS renderers submit an implementation report (and, if necessary, the testcases used for that implementation report) to the W3C before releasing an unprefixed implementation of any CSS features. Testcases submitted to W3C are subject to review and correction by the CSS Working Group.

Further information on submitting testcases and implementation reports can be found from on the CSS Working Group’s website at https://www.w3.org/Style/CSS/Test/. Questions should be directed to the public-css-testsuite@w3.org mailing list.

References
Normative References
[COMPOSITING]
Rik Cabanier; Nikos Andronikos. Compositing and Blending Level 1. 13 January 2015. CR. URL: https://www.w3.org/TR/compositing-1/
[CSS-BACKGROUNDS-3]
Bert Bos; Elika Etemad; Brad Kemper. CSS Backgrounds and Borders Module Level 3. 26 July 2021. CR. URL: https://www.w3.org/TR/css-backgrounds-3/
[CSS-BOX-3]
Elika Etemad. CSS Box Model Module Level 3. 3 November 2022. CR. URL: https://www.w3.org/TR/css-box-3/
[CSS-CASCADE-4]
Elika Etemad; Tab Atkins Jr.. CSS Cascading and Inheritance Level 4. 13 January 2022. CR. URL: https://www.w3.org/TR/css-cascade-4/
[CSS-COLOR-4]
Tab Atkins Jr.; Chris Lilley; Lea Verou. CSS Color Module Level 4. 1 November 2022. CR. URL: https://www.w3.org/TR/css-color-4/
[CSS-COLOR-5]
Chris Lilley; et al. CSS Color Module Level 5. 28 June 2022. WD. URL: https://www.w3.org/TR/css-color-5/
[CSS-CONDITIONAL-3]
David Baron; Elika Etemad; Chris Lilley. CSS Conditional Rules Module Level 3. 13 January 2022. CR. URL: https://www.w3.org/TR/css-conditional-3/
[CSS-CONTAIN-1]
Tab Atkins Jr.; Florian Rivoal. CSS Containment Module Level 1. 25 October 2022. REC. URL: https://www.w3.org/TR/css-contain-1/
[CSS-CONTAIN-2]
Tab Atkins Jr.; Florian Rivoal; Vladimir Levin. CSS Containment Module Level 2. 17 September 2022. WD. URL: https://www.w3.org/TR/css-contain-2/
[CSS-COUNTER-STYLES-3]
Tab Atkins Jr.. CSS Counter Styles Level 3. 27 July 2021. CR. URL: https://www.w3.org/TR/css-counter-styles-3/
[CSS-DISPLAY-3]
Tab Atkins Jr.; Elika Etemad. CSS Display Module Level 3. 18 November 2022. CR. URL: https://www.w3.org/TR/css-display-3/
[CSS-EASING-1]
Brian Birtles; et al. CSS Easing Functions Level 1. 1 April 2021. CR. URL: https://www.w3.org/TR/css-easing-1/
[CSS-FLEXBOX-1]
Tab Atkins Jr.; et al. CSS Flexible Box Layout Module Level 1. 19 November 2018. CR. URL: https://www.w3.org/TR/css-flexbox-1/
[CSS-FONTS-3]
John Daggett; Myles Maxfield; Chris Lilley. CSS Fonts Module Level 3. 20 September 2018. REC. URL: https://www.w3.org/TR/css-fonts-3/
[CSS-IMAGES-3]
Tab Atkins Jr.; Elika Etemad; Lea Verou. CSS Images Module Level 3. 17 December 2020. CR. URL: https://www.w3.org/TR/css-images-3/
[CSS-IMAGES-4]
Tab Atkins Jr.; Elika Etemad; Lea Verou. CSS Image Values and Replaced Content Module Level 4. 13 April 2017. WD. URL: https://www.w3.org/TR/css-images-4/
[CSS-MULTICOL-1]
Florian Rivoal; Rachel Andrew. CSS Multi-column Layout Module Level 1. 12 October 2021. CR. URL: https://www.w3.org/TR/css-multicol-1/
[CSS-POSITION-3]
Elika Etemad; Tab Atkins Jr.. CSS Positioned Layout Module Level 3. 1 September 2022. WD. URL: https://www.w3.org/TR/css-position-3/
[CSS-SIZING-3]
Tab Atkins Jr.; Elika Etemad. CSS Box Sizing Module Level 3. 17 December 2021. WD. URL: https://www.w3.org/TR/css-sizing-3/
[CSS-SIZING-4]
Tab Atkins Jr.; Elika Etemad; Jen Simmons. CSS Box Sizing Module Level 4. 20 May 2021. WD. URL: https://www.w3.org/TR/css-sizing-4/
[CSS-STYLE-ATTR]
Tantek Çelik; Elika Etemad. CSS Style Attributes. 7 November 2013. REC. URL: https://www.w3.org/TR/css-style-attr/
[CSS-SYNTAX-3]
Tab Atkins Jr.; Simon Sapin. CSS Syntax Module Level 3. 24 December 2021. CR. URL: https://www.w3.org/TR/css-syntax-3/
[CSS-TEXT-4]
Elika Etemad; et al. CSS Text Module Level 4. 31 December 2022. WD. URL: https://www.w3.org/TR/css-text-4/
[CSS-TRANSFORMS-1]
Simon Fraser; et al. CSS Transforms Module Level 1. 14 February 2019. CR. URL: https://www.w3.org/TR/css-transforms-1/
[CSS-TRANSFORMS-2]
Tab Atkins Jr.; et al. CSS Transforms Module Level 2. 9 November 2021. WD. URL: https://www.w3.org/TR/css-transforms-2/
[CSS-UI-3]
Tantek Çelik; Florian Rivoal. CSS Basic User Interface Module Level 3 (CSS3 UI). 21 June 2018. REC. URL: https://www.w3.org/TR/css-ui-3/
[CSS-UI-4]
Florian Rivoal. CSS Basic User Interface Module Level 4. 16 March 2021. WD. URL: https://www.w3.org/TR/css-ui-4/
[CSS-VALUES-3]
Tab Atkins Jr.; Elika Etemad. CSS Values and Units Module Level 3. 1 December 2022. CR. URL: https://www.w3.org/TR/css-values-3/
[CSS-VARIABLES-1]
Tab Atkins Jr.. CSS Custom Properties for Cascading Variables Module Level 1. 16 June 2022. CR. URL: https://www.w3.org/TR/css-variables-1/
[CSS-WILL-CHANGE-1]
Tab Atkins Jr.. CSS Will Change Module Level 1. 5 May 2022. CR. URL: https://www.w3.org/TR/css-will-change-1/
[CSS-WRITING-MODES-3]
Elika Etemad; Koji Ishii. CSS Writing Modes Level 3. 10 December 2019. REC. URL: https://www.w3.org/TR/css-writing-modes-3/
[CSS2]
Bert Bos; et al. Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification. 7 June 2011. REC. URL: https://www.w3.org/TR/CSS21/
[CSS3-MEDIAQUERIES]
Florian Rivoal. Media Queries Level 3. 5 April 2022. REC. URL: https://www.w3.org/TR/mediaqueries-3/
[CSS3-NAMESPACE]
Elika Etemad. CSS Namespaces Module Level 3. 20 March 2014. REC. URL: https://www.w3.org/TR/css-namespaces-3/
[RFC2119]
S. Bradner. Key words for use in RFCs to Indicate Requirement Levels. March 1997. Best Current Practice. URL: https://datatracker.ietf.org/doc/html/rfc2119
[SELECTORS-3]
Tantek Çelik; et al. Selectors Level 3. 6 November 2018. REC. URL: https://www.w3.org/TR/selectors-3/
[SELECTORS-4]
Elika Etemad; Tab Atkins Jr.. Selectors Level 4. 11 November 2022. WD. URL: https://www.w3.org/TR/selectors-4/
Informative References
[CSS-ALIGN-3]
Elika Etemad; Tab Atkins Jr.. CSS Box Alignment Module Level 3. 24 December 2021. WD. URL: https://www.w3.org/TR/css-align-3/
[CSS-ANIMATIONS-1]
Dean Jackson; et al. CSS Animations Level 1. 11 October 2018. WD. URL: https://www.w3.org/TR/css-animations-1/
[CSS-BREAK-3]
Rossen Atanassov; Elika Etemad. CSS Fragmentation Module Level 3. 4 December 2018. CR. URL: https://www.w3.org/TR/css-break-3/
[CSS-CASCADE-3]
Elika Etemad; Tab Atkins Jr.. CSS Cascading and Inheritance Level 3. 11 February 2021. REC. URL: https://www.w3.org/TR/css-cascade-3/
[CSS-CASCADE-5]
Elika Etemad; Miriam Suzanne; Tab Atkins Jr.. CSS Cascading and Inheritance Level 5. 13 January 2022. CR. URL: https://www.w3.org/TR/css-cascade-5/
[CSS-COLOR-3]
Tantek Çelik; Chris Lilley; David Baron. CSS Color Module Level 3. 18 January 2022. REC. URL: https://www.w3.org/TR/css-color-3/
[CSS-COLOR-ADJUST-1]
Elika Etemad; et al. CSS Color Adjustment Module Level 1. 14 June 2022. CR. URL: https://www.w3.org/TR/css-color-adjust-1/
[CSS-CONDITIONAL-4]
David Baron; Elika Etemad; Chris Lilley. CSS Conditional Rules Module Level 4. 17 February 2022. CR. URL: https://www.w3.org/TR/css-conditional-4/
[CSS-FONT-LOADING-3]
Tab Atkins Jr.. CSS Font Loading Module Level 3. 22 May 2014. WD. URL: https://www.w3.org/TR/css-font-loading-3/
[CSS-FONTS-4]
John Daggett; Myles Maxfield; Chris Lilley. CSS Fonts Module Level 4. 21 December 2021. WD. URL: https://www.w3.org/TR/css-fonts-4/
[CSS-GRID-1]
Tab Atkins Jr.; et al. CSS Grid Layout Module Level 1. 18 December 2020. CR. URL: https://www.w3.org/TR/css-grid-1/
[CSS-GRID-2]
Tab Atkins Jr.; Elika Etemad; Rossen Atanassov. CSS Grid Layout Module Level 2. 18 December 2020. CR. URL: https://www.w3.org/TR/css-grid-2/
[CSS-LISTS-3]
Elika Etemad; Tab Atkins Jr.. CSS Lists and Counters Module Level 3. 17 November 2020. WD. URL: https://www.w3.org/TR/css-lists-3/
[CSS-LOGICAL-1]
Rossen Atanassov; Elika Etemad. CSS Logical Properties and Values Level 1. 27 August 2018. WD. URL: https://www.w3.org/TR/css-logical-1/
[CSS-MASKING-1]
Dirk Schulze; Brian Birtles; Tab Atkins Jr.. CSS Masking Module Level 1. 5 August 2021. CR. URL: https://www.w3.org/TR/css-masking-1/
[CSS-SCROLL-SNAP-1]
Matt Rakow; et al. CSS Scroll Snap Module Level 1. 11 March 2021. CR. URL: https://www.w3.org/TR/css-scroll-snap-1/
[CSS-SCROLLBARS-1]
Tantek Çelik; Rossen Atanassov; Florian Rivoal. CSS Scrollbars Styling Module Level 1. 9 December 2021. CR. URL: https://www.w3.org/TR/css-scrollbars-1/
[CSS-SHAPES-1]
Rossen Atanassov; Alan Stearns. CSS Shapes Module Level 1. 15 November 2022. CR. URL: https://www.w3.org/TR/css-shapes-1/
[CSS-SPEECH-1]
Daniel Weck. CSS Speech Module. 10 March 2020. CR. URL: https://www.w3.org/TR/css-speech-1/
[CSS-TEXT-3]
Elika Etemad; Koji Ishii; Florian Rivoal. CSS Text Module Level 3. 27 January 2023. CR. URL: https://www.w3.org/TR/css-text-3/
[CSS-TEXT-DECOR-3]
Elika Etemad; Koji Ishii. CSS Text Decoration Module Level 3. 5 May 2022. CR. URL: https://www.w3.org/TR/css-text-decor-3/
[CSS-TRANSITIONS-1]
David Baron; et al. CSS Transitions. 11 October 2018. WD. URL: https://www.w3.org/TR/css-transitions-1/
[CSS-WRITING-MODES-4]
Elika Etemad; Koji Ishii. CSS Writing Modes Level 4. 30 July 2019. CR. URL: https://www.w3.org/TR/css-writing-modes-4/
[FILTER-EFFECTS-1]
Dirk Schulze; Dean Jackson. Filter Effects Module Level 1. 18 December 2018. WD. URL: https://www.w3.org/TR/filter-effects-1/
[MEDIAQUERIES-4]
Florian Rivoal; Tab Atkins Jr.. Media Queries Level 4. 25 December 2021. CR. URL: https://www.w3.org/TR/mediaqueries-4/
[RESIZE-OBSERVER-1]
Aleks Totic; Greg Whitworth. Resize Observer. 11 February 2020. WD. URL: https://www.w3.org/TR/resize-observer-1/
[WEB-ANIMATIONS-1]
Brian Birtles; et al. Web Animations. 8 September 2022. WD. URL: https://www.w3.org/TR/web-animations-1/
HTML4 and CSS2 currently support media-dependent style sheets tailored for different media types. For example, a document may use sans-serif fonts when displayed on a screen and serif fonts when printed. ‘screen’ and ‘print’ are two media types that have been defined. Media queries extend the functionality of media types by allowing more precise labeling of style sheets.

A media query consists of a media type and zero or more expressions that check for the conditions of particular media features. Among the media features that can be used in media queries are ‘width’, ‘height’, and ‘color’. By using media queries, presentations can be tailored to a specific range of output devices without changing the content itself.

Status of this Document
This section describes the status of this document at the time of its publication. A list of current W3C publications and the latest revision of this technical report can be found in the W3C technical reports index at https://www.w3.org/TR/.

This document was published by the CSS Working Group as a Recommendation using the Recommendation track. It includes proposed corrections.

A W3C Recommendation is a specification that, after extensive consensus-building, is endorsed by W3C and its Members, and has commitments from Working Group members to royalty-free licensing for implementations.

W3C recommends the wide deployment of this specification as a standard for the Web.

Please send feedback by filing issues in GitHub (preferred), including the spec code “mediaqueries-3” in the title, like this: “[mediaqueries-3] …summary of comment…”. All issues and comments are archived. Alternately, feedback can be sent to the (archived) public mailing list www-style@w3.org. Comments are due by 5 June 2022.

This document is governed by the 2 November 2021 W3C Process Document.

This document was produced by a group operating under the W3C Patent Policy. W3C maintains a public list of any patent disclosures made in connection with the deliverables of the group; that page also includes instructions for disclosing a patent. An individual who has actual knowledge of a patent which the individual believes contains Essential Claim(s) must disclose the information in accordance with section 6 of the W3C Patent Policy.

Proposed corrections are marked in the document.
Table of contents
1.Background
2.Media Queries
3.Syntax
3.1.Error Handling
4.Media features
4.1.width
4.2.height
4.3.device-width
4.4.device-height
4.5.orientation
4.6.aspect-ratio
4.7.device-aspect-ratio
4.8.color
4.9.color-index
4.10.monochrome
4.11.resolution
4.12.scan
4.13.grid
5.Values
6.Units
6.1.Resolution
7.Changes
7.1.Changes Since the 19 June 2012 Recommendation
7.2.Changes Since the 27 July 2010 Candidate Recommendation
Acknowledgments
References
Normative references
Other references
1. Background
(This section is not normative.)

HTML4 [HTML401] and CSS2 [CSS21] currently support media-dependent style sheets tailored for different media types. For example, a document may use different style sheets for screen and print. In HTML4, this can be written as:

<link rel="stylesheet" type="text/css" media="screen" href="sans-serif.css">
<link rel="stylesheet" type="text/css" media="print" href="serif.css">
Inside a CSS style sheet, one can declare that sections apply to certain media types:

@media screen {
  * { font-family: sans-serif }
}
The ‘print’ and ‘screen’ media types are defined in HTML4. The complete list of media types in HTML4 is: ‘aural’, ‘braille’, ‘handheld’, ‘print’, ‘projection’, ‘screen’, ‘tty’, ‘tv’. CSS2 defines the same list, deprecates ‘aural’ and adds ‘embossed’ and ‘speech’. Also, ‘all’ is used to indicate that the style sheet applies to all media types.

Media-specific style sheets are supported by several user agents. The most commonly used feature is to distinguish between ‘screen’ and ‘print’.

There have been requests for ways to describe in more detail what type of output devices a style sheet applies to. Fortunately HTML4 foresaw these requests and defined a forward-compatible syntax for media types. Here is a quote from HTML4, section 6.13:

Future versions of HTML may introduce new values and may allow parameterized values. To facilitate the introduction of these extensions, conforming user agents must be able to parse the media attribute value as follows:

The value is a comma-separated list of entries. For example,
media="screen, 3d-glasses, print and resolution > 90dpi"
is mapped to:

"screen"
"3d-glasses"
"print and resolution > 90dpi"
Each entry is truncated just before the first character that isn't a US ASCII letter [a-zA-Z] (Unicode decimal 65-90, 97-122), digit [0-9] (Unicode hex 30-39), or hyphen (45). In the example, this gives:
"screen"
"3d-glasses"
"print"
Media queries, as described in this specification, build on the mechanism outlined in HTML4. The syntax of media queries fit into the media type syntax reserved in HTML4. The media attribute of HTML4 also exists in XHTML and generic XML. The same syntax can also be used inside in the ‘@media’ and ‘@import’ rules of CSS.

However, the parsing rules for media queries are incompatible with those of HTML4 so that they are consistent with those of media queries used in CSS.

Newer versions of HTML [HTML] reference the Media Queries specification directly and thus updates the rules for HTML.

2. Media Queries
A media query consists of a media type and zero or more expressions that check for the conditions of particular media features.

Statements regarding media queries in this section assume the syntax section is followed. Media queries that do not conform to the syntax are discussed in the error handling section. I.e. the syntax takes precedence over requirements in this section.

Here is a simple example written in HTML:

<link rel="stylesheet" media="screen and (color)" href="example.css" />
This example expresses that a certain style sheet (example.css) applies to devices of a certain media type (‘screen’) with certain feature (it must be a color screen).

Here the same media query written in an @import-rule in CSS:

@import url(color.css) screen and (color);
A media query is a logical expression that is either true or false. A media query is true if the media type of the media query matches the media type of the device where the user agent is running (as defined in the "Applies to" line), and all expressions in the media query are true.

A shorthand syntax is offered for media queries that apply to all media types; the keyword ‘all’ can be left out (along with the trailing ‘and’). I.e. if the media type is not explicitly given it is ‘all’.

I.e. these are identical:

@media all and (min-width:500px) { … }
@media (min-width:500px) { … }
As are these:

@media (orientation: portrait) { … }
@media all and (orientation: portrait) { … }
Several media queries can be combined in a media query list. A comma-separated list of media queries. If one or more of the media queries in the comma-separated list are true, the whole list is true, and otherwise false. In the media queries syntax, the comma expresses a logical OR, while the ‘and’ keyword expresses a logical AND.

Here is an example of several media queries in a comma-separated list using the an @media-rule in CSS:

@media screen and (color), projection and (color) { … }
If the media query list is empty (i.e. the declaration is the empty string or consists solely of whitespace) it evaluates to true.

I.e. these are equivalent:

@media all { … }
@media { … }
The logical NOT can be expressed through the ‘not’ keyword. The presence of the keyword ‘not’ at the beginning of the media query negates the result. I.e., if the media query had been true without the ‘not’ keyword it will become false, and vice versa. User agents that only support media types (as described in HTML4) will not recognize the ‘not’ keyword and the associated style sheet is therefore not applied.

<link rel="stylesheet" media="not screen and (color)" href="example.css" />
The keyword ‘only’ can also be used to hide style sheets from older user agents. User agents must process media queries starting with ‘only’ as if the ‘only’ keyword was not present.

<link rel="stylesheet" media="only screen and (color)" href="example.css" />
The media queries syntax can be used with HTML, XHTML, XML [XMLSTYLE] and the @import and @media rules of CSS.

Here is the same example written in HTML, XHTML, XML, @import and @media:

<link media="screen and (color), projection and (color)" rel="stylesheet" href="example.css">
<link media="screen and (color), projection and (color)" rel="stylesheet" href="example.css" />
<?xml-stylesheet media="screen and (color), projection and (color)" rel="stylesheet" href="example.css" ?>
@import url(example.css) screen and (color), projection and (color);
@media screen and (color), projection and (color) { … }
The [XMLSTYLE] specification has not yet been updated to use media queries in the media pseudo-attribute.

If a media feature does not apply to the device where the UA is running, expressions involving the media feature will be false.

The media feature ‘device-aspect-ratio’ only applies to visual devices. On an aural device, expressions involving ‘device-aspect-ratio’ will therefore always be false:

<link rel="stylesheet" media="aural and (device-aspect-ratio: 16/9)" href="example.css" />
Expressions will always be false if the unit of measurement does not apply to the device.

The ‘px’ unit does not apply to ‘speech’ devices so the following media query is always false:

<link rel="stylesheet" media="speech and (min-device-width: 800px)" href="example.css" />
Note that the media queries in this example would have been true if the keyword ‘not’ had been added to the beginning of the media query.

To avoid circular dependencies, unless another feature explicitly specifies that it affects the resolution of Media Queries, it is not necessary to apply the style sheet in order to evaluate expressions. For example, the aspect ratio of a printed document may be influenced by a style sheet, but expressions involving ‘device-aspect-ratio’ will be based on the default aspect ratio of the user agent.

User agents are expected, but not required, to re-evaluate and re-layout the page in response to changes in the user environment, for example if the device is tilted from landscape to portrait mode.

3. Syntax
The media query syntax is described in terms of the CSS2 grammar. As such, rules not defined here are defined in CSS2. The media_query_list production defined below replaces the media_list production from CSS2. [CSS21]

media_query_list
 : S* [media_query [ ',' S* media_query ]* ]?
 ;
media_query
 : [ONLY | NOT]? S* media_type S* [ AND S* expression ]*
 | expression [ AND S* expression ]*
 ;
media_type
 : IDENT
 ;
expression
 : '(' S* media_feature S* [ ':' S* expr ]? ')' S*
 ;
media_feature
 : IDENT
 ;
COMMENT tokens, as defined by CSS2, do not occur in the grammar (to keep it readable), but any number of these tokens may appear anywhere between other tokens. [CSS21]

The following new definitions are introduced:

L  l|\\0{0,4}(4c|6c)(\r\n|[ \t\r\n\f])?|\\l
Y  y|\\0{0,4}(59|79)(\r\n|[ \t\r\n\f])?|\\y
The following new tokens are introduced:

{O}{N}{L}{Y}      {return ONLY;}
{N}{O}{T}         {return NOT;}
{A}{N}{D}         {return AND;}
{num}{D}{P}{I}    {return RESOLUTION;}
{num}{D}{P}{C}{M} {return RESOLUTION;}
RESOLUTION is to be added to the CSS2 term production.

CSS style sheets are generally ASCII case-insensitive, and this is also the case for media queries.

In addition to conforming to the syntax, each media query needs to use media types and media features according to their respective specification in order to be considered conforming.

Only the first media query is conforming in the example below because the "example" media type does not exist.

@media all { body { background:lime } }
@media example { body { background:red } }
3.1. Error Handling
For media queries that are not conforming user agents need to follow the rules described in this section.

PROPOSED CORRECTION 1: Clarify that the keywords ‘not’, ‘and’, ‘only’, and ‘or’ should not be treated as unknown media types, but as syntax errors when used in place of media types.
The reasoning for this change can be found in the minutes of the 2013-05-30 CSS WG teleconference and in the emails referenced therefrom.

This change has tests
Show ChangeShow CurrentShow Future
Unknown media types. Unknown media types evaluate to false. Effectively, they are treated identically to known media types that do not match the media type of the device. However, an exception is made for media types ‘not’, ‘and’, ‘only’, and ‘or’. Even though they do match the IDENT production, they must not be treated as unknown media types, but rather trigger the malformed query clause.

The media query "unknown" will evaluate to false, unless unknown is actually a supported media type. Similarly, "not unknown" will evaluate to true.

The following is a malformed media query because it uses ‘only’ and ‘or’ as media types.

@media only and or { … }
Unknown media types are distinct from media types that do not actually match the IDENT production. Those fall under the malformed media query clause.

Unknown media features. User agents are to represent a media query as "not all" when one of the specified media features is not known.

<link rel="stylesheet" media="screen and (max-weight: 3kg) and (color), (color)" href="example.css" />
In this example, the first media query will be represented as "not all" and evaluate to false and the second media query is evaluated as if the first had not been specified, effectively.

@media (min-orientation:portrait) { … }
Is represented as "not all" because the ‘orientation’ feature does not accept the ‘min-’ prefix.

Unknown media feature values. As with unknown media features, user agents are to represent a media query as "not all" when one of the specified media feature values is not known.

The media query (color:20example) specifies an unknown value for the ‘color’ media feature and is therefore represented as "not all".

This media query is represented as "not all" because negative lengths are not allowed for the ‘width’ media feature:

@media (min-width: -100px) { … }
Malformed media query. User agents are to handle unexpected tokens encountered while parsing a media query by reading until the end of the media query, while observing the rules for matching pairs of (), [], {}, "", and '', and correctly handling escapes. Media queries with unexpected tokens are represented as "not all". [CSS21]

@media (example, all,), speech { /* only applicable to speech devices */ }
@media &test, screen           { /* only applicable to screen devices */ }
The following is an malformed media query because having no space between ‘and’ and the expression is not allowed. (That is reserved for the functional notation syntax.)

@media all and(color) { … }
Media queries are expected to follow the error handling rules of the host language as well.

@media test;,all { body { background:lime } }
… will not apply because the semicolon terminates the @media rule in CSS.

4. Media features
Syntactically, media features resemble CSS properties: they have names and accept certain values. There are, however, several important differences between properties and media features:

Properties are used in declarations to give information about how to present a document. Media features are used in expressions to describe requirements of the output device.
Most media features accept optional ‘min-’ or ‘max-’ prefixes to express "greater or equal to" and "smaller or equal to" constraints. This syntax is used to avoid "<" and ">" characters which may conflict with HTML and XML. Those media features that accept prefixes will most often be used with prefixes, but can also be used alone.
Properties always require a value to form a declaration. Media features, on the other hand, can also be used without a value. For a media feature feature, (feature) will evaluate to true if (feature:x) will evaluate to true for a value x other than zero or zero followed by a unit identifier (i.e., other than 0, 0px, 0em, etc.). Media features that are prefixed by min/max cannot be used without a value. When a media feature prefixed with min/max is used without a value it makes the media query malformed.
Properties may accept more complex values, e.g., calculations that involve several other values. Media features only accept single values: one keyword, one number, or a number with a unit identifier. (The only exceptions are the ‘aspect-ratio’ and ‘device-aspect-ratio’ media features.)
For example, the ‘color’ media feature can form expressions without a value (‘(color)’), or with a value (‘(min-color: 1)’).

This specification defines media features usable with visual and tactile devices. Similarly, media features can be defined for aural media types.

4.1. width
Value: <length>
Applies to: visual and tactile media types
Accepts min/max prefixes: yes
The ‘width’ media feature describes the width of the targeted display area of the output device. For continuous media, this is the width of the viewport (as described by CSS2, section 9.1.1 [CSS21]) including the size of a rendered scroll bar (if any). For paged media, this is the width of the page box (as described by CSS2, section 13.2 [CSS21]).

A specified <length> cannot be negative.

For example, this media query expresses that the style sheet is usable on printed output wider than 25cm:

<link rel="stylesheet" media="print and (min-width: 25cm)" href="http://…" />
This media query expresses that the style sheet is usable on devices with viewport (the part of the screen/paper where the document is rendered) widths between 400 and 700 pixels:

@media screen and (min-width: 400px) and (max-width: 700px) { … }
This media query expresses that style sheet is usable on screen and handheld devices if the width of the viewport is greater than 20em.

@media handheld and (min-width: 20em),
  screen and (min-width: 20em) { … }
The ‘em’ value is relative to the initial value of ‘font-size’.

4.2. height
Value: <length>
Applies to: visual and tactile media types
Accepts min/max prefixes: yes
The ‘height’ media feature describes the height of the targeted display area of the output device. For continuous media, this is the height of the viewport including the size of a rendered scroll bar (if any). For paged media, this is the height of the page box.

A specified <length> cannot be negative.

4.3. device-width
Value: <length>
Applies to: visual and tactile media types
Accepts min/max prefixes: yes
The ‘device-width’ media feature describes the width of the rendering surface of the output device. For continuous media, this is the width of the screen. For paged media, this is the width of the page sheet size.

A specified <length> cannot be negative.

@media screen and (device-width: 800px) { … }
In the example above, the style sheet will apply only to screens that currently displays exactly 800 horizontal pixels. The ‘px’ unit is of the logical kind, as described in the Units section.

4.4. device-height
Value: <length>
Applies to: visual and tactile media types
Accepts min/max prefixes: yes
The ‘device-height’ media feature describes the height of the rendering surface of the output device. For continuous media, this is the height of the screen. For paged media, this is the height of the page sheet size.

A specified <length> cannot be negative.

<link rel="stylesheet" media="screen and (device-height: 600px)" />
In the example above, the style sheet will apply only to screens that have exactly 600 vertical pixels. Note that the definition of the ‘px’ unit is the same as in other parts of CSS.

4.5. orientation
Value: portrait | landscape
Applies to: bitmap media types
Accepts min/max prefixes: no
The ‘orientation’ media feature is ‘portrait’ when the value of the ‘height’ media feature is greater than or equal to the value of the ‘width’ media feature. Otherwise ‘orientation’ is ‘landscape’.

@media all and (orientation:portrait) { … }
@media all and (orientation:landscape) { … }
4.6. aspect-ratio
Value: <ratio>
Applies to: bitmap media types
Accepts min/max prefixes: yes
The ‘aspect-ratio’ media feature is defined as the ratio of the value of the ‘width’ media feature to the value of the ‘height’ media feature.

4.7. device-aspect-ratio
Value: <ratio>
Applies to: bitmap media types
Accepts min/max prefixes: yes
The ‘device-aspect-ratio’ media feature is defined as the ratio of the value of the ‘device-width’ media feature to the value of the ‘device-height’ media feature.

For example, if a screen device with square pixels has 1280 horizontal pixels and 720 vertical pixels (commonly referred to as "16:9"), the following Media Queries will all match the device:

@media screen and (device-aspect-ratio: 16/9) { … }
@media screen and (device-aspect-ratio: 32/18) { … }
@media screen and (device-aspect-ratio: 1280/720) { … }
@media screen and (device-aspect-ratio: 2560/1440) { … }
4.8. color
Value: <integer>
Applies to: visual media types
Accept min/max prefixes: yes
The ‘color’ media feature describes the number of bits per color component of the output device. If the device is not a color device, the value is zero.

A specified <integer> cannot be negative.

For example, these two media queries express that a style sheet applies to all color devices:

@media all and (color) { … }
@media all and (min-color: 1) { … }
This media query expresses that a style sheet applies to color devices with 2 or more bits per color component:

@media all and (min-color: 2) { … }
If different color components are represented by different number of bits, the smallest number is used.

For instance, if an 8-bit color system represents the red component with 3 bits, the green component with 3 bits and the blue component with 2 bits, the ‘color’ media feature will have a value of 2.

In a device with indexed colors, the minimum number of bits per color component in the lookup table is used.

The described functionality is only able to describe color capabilities at a superficial level. If further functionality is required, RFC2531 [RFC2531] provides more specific media features which may be supported at a later stage.

4.9. color-index
Value: <integer>
Applies to: visual media types
Accepts min/max prefixes: yes
The ‘color-index’ media feature describes the number of entries in the color lookup table of the output device. If the device does not use a color lookup table, the value is zero.

A specified <integer> cannot be negative.

For example, here are two ways to express that a style sheet applies to all color index devices:

@media all and (color-index) { … }
@media all and (min-color-index: 1) { … }
This media query expresses that a style sheet applies to a color index device with 256 or more entries:

<?xml-stylesheet media="all and (min-color-index: 256)"
  href="http://www.example.com/…" ?>
4.10. monochrome
Value: <integer>
Applies to: visual media types
Accepts min/max prefixes: yes
The ‘monochrome’ media feature describes the number of bits per pixel in a monochrome frame buffer. If the device is not a monochrome device, the output device value will be 0.

A specified <integer> cannot be negative.

For example, here are two ways to express that a style sheet applies to all monochrome devices:

@media all and (monochrome) { … }
@media all and (min-monochrome: 1) { … }
Express that a style sheet applies to monochrome devices with more than 2 bits per pixels:

@media all and (min-monochrome: 2) { … }
Express that there is one style sheet for color pages and another for monochrome:

<link rel="stylesheet" media="print and (color)" href="http://…" />
<link rel="stylesheet" media="print and (monochrome)" href="http://…" />
4.11. resolution
Value: <resolution>
Applies to: bitmap media types
Accepts min/max prefixes: yes
The ‘resolution’ media feature describes the resolution of the output device, i.e. the density of the pixels. When querying devices with non-square pixels, in ‘min-resolution’ queries the least-dense dimension must be compared to the specified value and in ‘max-resolution’ queries the most-dense dimensions must be compared instead. A ‘resolution’ (without a "min-" or "max-" prefix) query never matches a device with non-square pixels.

For printers, this corresponds to the screening resolution (the resolution for printing dots of arbitrary color).

For example, this media query expresses that a style sheet is usable on devices with resolution greater than 300 dots per inch:

@media print and (min-resolution: 300dpi) { … }
This media query expresses that a style sheet is usable on devices with resolution greater than 118 dots per centimeter:

@media print and (min-resolution: 118dpcm) { … }
4.12. scan
Value: progressive | interlace
Applies to: "tv" media types
Accepts min/max prefixes: no
The ‘scan’ media feature describes the scanning process of "tv" output devices.

For example, this media query expresses that a style sheet is usable on tv devices with progressive scanning:

@media tv and (scan: progressive) { … }
4.13. grid
Value: <integer>
Applies to: visual and tactile media types
Accepts min/max prefixes: no
The ‘grid’ media feature is used to query whether the output device is grid or bitmap. If the output device is grid-based (e.g., a "tty" terminal, or a phone display with only one fixed font), the value will be 1. Otherwise, the value will be 0.

Only 0 and 1 are valid values. (This includes -0.) Thus everything else creates a malformed media query.

Here are two examples:

@media handheld and (grid) and (max-width: 15em) { … }
@media handheld and (grid) and (max-device-height: 7em) { … }
5. Values
This specification also introduces two new values.

The <ratio> value is a positive (not zero or negative) <integer> followed by optional whitespace, followed by a solidus (‘/’), followed by optional whitespace, followed by a positive <integer>.

The <resolution> value is a positive <number> immediately followed by a unit identifier (‘dpi’ or ‘dpcm’).

Whitespace, <integer>, <number> and other values used by this specification are the same as in other parts of CSS, normatively defined by CSS 2.1. [CSS21]

6. Units
The units used in media queries are the same as in other parts of CSS. For example, the pixel unit represents CSS pixels and not physical pixels.

Relative units in media queries are based on the initial value, which means that units are never based on results of declarations. For example, in HTML, the ‘em’ unit is relative to the initial value of ‘font-size’.

6.1. Resolution
The ‘dpi’ and ‘dpcm’ units describe the resolution of an output device, i.e., the density of device pixels. Resolution unit identifiers are:

dpi
dots per CSS ‘inch’
dpcm
dots per CSS ‘centimeter’
In this specification, these units are only used in the ‘resolution’ media feature.

7. Changes
7.1. Changes Since the 19 June 2012 Recommendation
Proposed Corrections were introduced:

Proposed Correction 1 in Section 3.1: Clarify that the keywords ‘not’, ‘and’, ‘only’, and ‘or’ should not be treated as unknown media types, but as syntax errors when used in place of media types.
A handful of editorial and markup corrections were also made:

Section 2: Dropped a redundant attribute in an example.
<link rel="stylesheet" media="screen and (color), projection and (color)" rel="stylesheet" href="example.css">
<link rel="stylesheet" media="screen and (color), projection and (color)" rel="stylesheet" href="example.css" />
Section 2: Adjusted a sentence to make it easier for other specifications to extend this one.
To avoid circular dependencies, it is neverunless another feature explicitly specifies that it affects the resolution of Media Queries, it is not necessary to apply the style sheet in order to evaluate expressions.
Section 3: Used a more precise term to characterize the syntax of css, in a descriptive (rather than prescriptive) sentence.
CSS style sheets are generally case-insensitive ASCII case-insensitive, and this is also the case for media queries.
The veracity of this claim is validated by a test.
Section 4.13: Corrected a syntax error in an example.
@media handheld and (grid) and (device-max-heightmax-device-height: 7em) { … }
Bibliographical references have been updated to point to the latest versions.
Various links throughout the specification were updated from http to https.
7.2. Changes Since the 27 July 2010 Candidate Recommendation
The following changes were made to this specification since the 27 July 2010 Candidate Recommendation:

Section 4.11: Clarified the meaning of resolution in the case of printers, for which the meaning of dots was ambiguous.
For printers, this corresponds to the screening resolution (the resolution for printing dots of arbitrary color).

Section 6.1: Made it explicit that the ‘inch’ and ‘cm’ mentioned are the CSS units, not the physical ones.
dpi
dots per CSS ‘inch’inch
dpcm
dots per CSS ‘centimeter’cm
Section 4.1: Adjust mistaken non normative wording to match correct normative wording from Section 6.
The ‘em’ value is relative to the font size of the root elementinitial value of ‘font-size’..

Section 6: Clarify that units are never based on the results of declarations.
Relative units in media queries are based on the initial value, which means that units are never based on results of declarations. For example, in HTML, the ‘em’ unit is relative to the initial value of ‘font-size’.

Acknowledgments
This specification is the product of the W3C Working Group on Cascading Style Sheets.

Comments from Björn Höhrmann, Christoph Päper, Chris Lilley, Simon Pieters, Rijk van Geijtenbeek, Sigurd Lerstad, Arve Bersvendsen, Susan Lesch, Philipp Hoschka, Roger Gimson, Steven Pemberton, Simon Kissane, Melinda Grant, and L. David Baron improved this specification.

References
Normative references
[CSS21]
Bert Bos; et al. Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification. 7 June 2011. W3C Recommendation. URL: http://www.w3.org/TR/2011/REC-CSS2-20110607
Other references
[HTML401]
Dave Raggett; Arnaud Le Hors; Ian Jacobs. HTML 4.01 Specification. 24 December 1999, superseded 27 March 2018. W3C Recommendation. URL: https://www.w3.org/TR/2018/SPSD-html401-20180327/
[HTML]
Anne van Kesteren; et al. HTML Standard. Living Standard. URL: https://html.spec.whatwg.org/multipage/
[RFC2531]
G. Klyne; L. McIntyre. Content Feature Schema for Internet Fax. March 1999. Internet RFC 2531. URL: http://www.ietf.org/rfc/rfc2531.txt
[XMLSTYLE]
James Clark; Simon Pieters; Henry S. Thompson Associating Style Sheets with XML documents 1.0 (Second Edition) 28 October 2010. W3C Recommendation. URL: http://www.w3.org/TR/2010/REC-xml-stylesheet-20101028/