#include <iostream>
#include <iomanip>
#include <string_view>

// A template is a construct that generates an ordinary type or function at compile
// time based on arguments the user supplies for the template parameters.
template<typename T> T& maximum(T& a, T& b);

// The process in which the compiler generates a class or function from a template
// is referred to as template instantiation

// maximum<int> is an instantiation of the template maximum<T>

int main(void)
{
    int x{4};
    int y{7};
    std::cout << "maximum(" << x << ", " << y << ") : "  << maximum(x, y) << std::endl;
    /*
    Whenever the compiler encounters a call to maximum, it generates a new function in
    which every occurrence of T in the template is replaced with the type of the arguments
    e.g., for the above call with two int variables, the function generated by the compiler
    will be,

        int& maximum(int& a, int& b)
        {
            return (a > b) ? a : b;
        }
    */

    double a{3.79};
    double b{2.808};
    std::cout << "maximum(" << a << ", " << b << ") : " << maximum(a, b) << std::endl;

    std::string_view sv1{"Delhi"};
    std::string_view sv2{"Denmark"};
    std::cout << "maximum(" << std::quoted(sv1) << ", " << std::quoted(sv2) << ") : "
    << maximum(sv1, sv2) << std::endl;

    return 0;
}

template<typename T> T& maximum(T& a, T& b)
{
    return (a > b) ? a : b;
}